filter(avg_abund>0.005) %>%
arrange(phylum,avg_abund)
phylum <- D %>%
group_by(phylum) %>%
dplyr::summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(treatment,phylum)
kable(D)
p <- ggplot(mO, aes(x=phylum,y=as.factor(sample),fill=counts))
p <- p + geom_tile()
p <- p + facet_grid(treatment~inoculation, scales = "free")
p <- p + ylab("sample")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1),axis.text.y = element_text(size=9))
p <- p + scale_fill_gradient2(low="ivory",high = "red")
p
my_palette = get_palette(c("#00AFBB", "#E7B800", "#FC4E07","darkgrey","beige"), length(unique(D$phylum)))
p <- ggplot(D, aes(x=factor(1), y=avg_abund, fill=phylum)) + geom_bar(width=4,stat="identity", colour="black", size=0.2)
p <- p + facet_grid(inoculation~treatment)
#p <- p + coord_polar(theta='y')
p <- p + xlab("relative abundances") + ylab("")
p <- p + scale_fill_manual(values = my_palette)
p <- p + theme(text = element_text(size=15),
axis.text.x = element_text(size=11),
# axis.text.y = element_text(size=12),
strip.text = element_text(size = 16),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(p)
#ggsave(filename = "../figures/phylum_piechart.png", height = 20, width = 20, plot = p, device = "png")
D <- D %>%
group_by(treatment) %>%
filter(avg_abund > 0.01) %>%
arrange(desc(avg_abund))
phylum <- D %>%
group_by(phylum) %>%
dplyr::summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(phylum)
D$taxa_level = rep("phylum", nrow(D))
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt",header=TRUE)
View(otu)
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L2.txt", header = TRUE, skip = 1)
View(otu)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt",header=TRUE)
View(otu)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
View(otu)
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt",header=TRUE, skip = 1)
View(otu)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L2.txt", header = TRUE, skip = 1)
View(otu)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
View(otu)
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt",header=TRUE, skip = 1)
View(otu)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
names(otu)[1] <- "sample"
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu$timepoint = metadata$inoculation[match(otu$sample,metadata$sample)]
names(otu)[1] <- "sample"
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu$timepoint = metadata$inoculation[match(otu$sample,metadata$sample)]
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "taxa")
View(metadata)
View(otu)
knitr::opts_chunk$set(echo = TRUE)
library("DT")
library("knitr")
library("dplyr")
library("tidyr")
library("broom")
library("vegan")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("data.table")
metadata <- fread("../mapping_file.csv")
names(metadata)[1] <- "sample"
metadata %>%
group_by(treatment,inoculation) %>%
dplyr::summarise(N=n()) %>%
spread(key = "inoculation", value = N)
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L2.txt", header = TRUE, skip = 1)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu$inoculation = metadata$inoculation[match(otu$sample,metadata$sample)]
## relative abundances
metadata_cols = names(metadata)[c(1,5,7)]
M <- select(otu,-all_of(metadata_cols))
M <- M/rowSums(M)
M <- bind_cols(select(otu, all_of(metadata_cols)),M)
otu = otu %>% relocate (treatment, inoculation, .after = sample)
metadata_cols = names(otu)[c(1,2,3)]
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "phylum")
mO$phylum <- gsub("^.*\\.","",mO$phylum)
mO$sample <- factor(mO$sample)
mO <- mO %>%
arrange(treatment)
m1 <- reshape2::melt(M,id.vars = metadata_cols, value.name = "counts", variable.name = "phylum")
m1$phylum <- gsub("^.*\\.","",m1$phylum)
m1$sample <- factor(m1$sample)
m1 <- m1 %>%
arrange(treatment)
# m1$sample <- paste(as.character(m1$sample),as.character(m1$timepoint),sep="-")
ordered_samples <- metadata %>%
arrange(treatment) %>%
select(treatment,sample)
m1$sample <- factor(m1$sample, levels = ordered_samples$sample)
m1$treatment <- factor(m1$treatment)
m1$inoculation <- factor(m1$inoculation)
D <- m1 %>%
group_by(phylum,treatment,inoculation) %>%
dplyr::summarise(N=n(), avg_abund = round(mean(counts),4), std = round(sd(counts),3)) %>%
filter(avg_abund>0.005) %>%
arrange(phylum,avg_abund)
phylum <- D %>%
group_by(phylum) %>%
dplyr::summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(treatment,phylum)
kable(D)
p <- ggplot(mO, aes(x=phylum,y=as.factor(sample),fill=counts))
p <- p + geom_tile()
p <- p + facet_grid(treatment~inoculation, scales = "free")
p <- p + ylab("sample")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1),axis.text.y = element_text(size=9))
p <- p + scale_fill_gradient2(low="ivory",high = "red")
p
my_palette = get_palette(c("#00AFBB", "#E7B800", "#FC4E07","darkgrey","beige"), length(unique(D$phylum)))
p <- ggplot(D, aes(x=factor(1), y=avg_abund, fill=phylum)) + geom_bar(width=4,stat="identity", colour="black", size=0.2)
p <- p + facet_grid(inoculation~treatment)
#p <- p + coord_polar(theta='y')
p <- p + xlab("relative abundances") + ylab("")
p <- p + scale_fill_manual(values = my_palette)
p <- p + theme(text = element_text(size=15),
axis.text.x = element_text(size=11),
# axis.text.y = element_text(size=12),
strip.text = element_text(size = 16),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(p)
#ggsave(filename = "../figures/phylum_piechart.png", height = 20, width = 20, plot = p, device = "png")
D <- D %>%
group_by(treatment) %>%
filter(avg_abund > 0.01) %>%
arrange(desc(avg_abund))
phylum <- D %>%
group_by(phylum) %>%
dplyr::summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(phylum)
D$taxa_level = rep("phylum", nrow(D))
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt",header=TRUE, skip = 1)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
names(otu)[1] <- "sample"
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu$timepoint = metadata$inoculation[match(otu$sample,metadata$sample)]
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "taxa")
View(otu)
otu$inoculation = metadata$inoculation[match(otu$sample,metadata$sample)]
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "taxa")
mO$level <- sapply(mO$taxa, function(x) length(strsplit(as.character(x),";")[[1]]) )
get_taxa <- function(x,n) {
z <- strsplit(x, split = ";")
res = lapply(z, function(x) x[n])
return(unlist(res))
}
##di seguito la funzione che divide le stringhe degli otu che sono messe come nomi delle colonne nei vari livelli tassonomici <3
get_taxa <- function(x,n) {
z <- strsplit(x, split = ";")
res = lapply(z, function(x) x[n])
return(unlist(res))
}
new_taxa <- c(NULL)
for (i in seq_along(mO$counts)) {
arg1 = as.character(mO$taxa[i])
arg2 = ifelse(mO$level[i] <= 6, mO$level[i], 6)
rr = get_taxa(arg1,arg2)
new_taxa <- c(new_taxa,rr)
}
for (i in seq_along(mO$counts)) {
arg1 = as.character(mO$taxa[i])
arg2 = ifelse(mO$level[i] <= 6, mO$level[i], 6)
rr = get_taxa(arg1,arg2)
new_taxa <- c(new_taxa,rr)
}
mO$new_taxa <- new_taxa
mO$new_taxa <- new_taxa
table(mO$level)
neues <- c("phylum","class","order","family","genus")
altes <- seq(2,6)
mO$level <- neues[match(mO$level,altes)]
## relative abundances
mO <- mO %>%
dplyr::group_by(level,sample) %>%
dplyr::mutate(tot = sum(counts), rel_abundance = counts/tot)
D <- mO %>%
dplyr::group_by(level,new_taxa,treatment,timepoint) %>%
dplyr::summarise(avg_abund = round(mean(rel_abundance),4), std = round(sd(rel_abundance),3))
D <- D %>%
group_by(treatment) %>%
filter(avg_abund > 0.01) %>%
arrange(desc(avg_abund))
phylum <- D %>%
group_by(phylum) %>%
dplyr::summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(phylum)
D$taxa_level = rep("phylum", nrow(D))
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt",header=TRUE, skip = 1)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
names(otu)[1] <- "sample"
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu$inoculation = metadata$inoculation[match(otu$sample,metadata$sample)]
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "taxa")
mO$level <- sapply(mO$taxa, function(x) length(strsplit(as.character(x),";")[[1]]) )
##di seguito la funzione che divide le stringhe degli otu che sono messe come nomi delle colonne nei vari livelli tassonomici <3
get_taxa <- function(x,n) {
z <- strsplit(x, split = ";")
res = lapply(z, function(x) x[n])
return(unlist(res))
}
new_taxa <- c(NULL)
for (i in seq_along(mO$counts)) {
arg1 = as.character(mO$taxa[i])
arg2 = ifelse(mO$level[i] <= 6, mO$level[i], 6)
rr = get_taxa(arg1,arg2)
new_taxa <- c(new_taxa,rr)
}
mO$new_taxa <- new_taxa
table(mO$level)
neues <- c("phylum","class","order","family","genus")
altes <- seq(2,6)
mO$level <- neues[match(mO$level,altes)]
## relative abundances
mO <- mO %>%
dplyr::group_by(level,sample) %>%
dplyr::mutate(tot = sum(counts), rel_abundance = counts/tot)
D <- mO %>%
dplyr::group_by(level,new_taxa,treatment,inoculation) %>%
dplyr::summarise(avg_abund = round(mean(rel_abundance),4), std = round(sd(rel_abundance),3))
D <- D %>%
dplyr::group_by(new_taxa,inoculation,treatment) %>%
dplyr::filter(avg_abund > 0.01) %>%
arrange(level,desc(avg_abund))
kable(D)
View(metadata)
D$level  <- factor(D$level,levels = c("phylum","class","order","family","genus"))
D0 <- D %>%
select(-c(std)) %>%
spread(treatment,avg_abund)
# D0[is.na(D0)] <- ""
bg.picker <- function(z) {
if(is.na(z)) {return(NULL)}
if(is.numeric(z)) {
if(z > 0.05 & z <= 0.10) {return("pink")}
if(z > 0.10) {return("yellow")}
}
}
library("formattable")
formattable(D0, list(
`` = color_tile("white","green"),
library("formattable")
formattable(D0, list(
`NA` = color_tile("white","green"),
`0` = color_tile("white","deepskyblue")
`AE1` = color_tile("white","yellow"),
D$level  <- factor(D$level,levels = c("phylum","class","order","family","genus"))
D0 <- D %>%
select(-c(std)) %>%
spread(treatment,avg_abund)
# D0[is.na(D0)] <- ""
bg.picker <- function(z) {
if(is.na(z)) {return(NULL)}
if(is.numeric(z)) {
if(z > 0.05 & z <= 0.10) {return("pink")}
if(z > 0.10) {return("yellow")}
}
}
library("formattable")
# formattable(D0, list(
#
#   `NA` = color_tile("white","green"),
#   `0` = color_tile("white","deepskyblue")
#   `AE1` = color_tile("white","yellow"),
#   `AE sintético 1` = color_tile("white","pink"),
#   `p-cimene` = color_tile("white","yellow"),
#   `γ-terpinene`=color_tile("white", "orange")
#   `Carvacrol`=color_tile("white", "gold")
#   `6 PR` = formatter("span",
#                   style = x ~ style(
#                     "border-radius" = "4px",
#                     "padding-right" = "4px",
#                     "background-color" = sapply(x, bg.picker))
#                   )
# ))
D$level  <- factor(D$level,levels = c("phylum","class","order","family","genus"))
D0 <- D %>%
select(-c(std)) %>%
spread(timepoint,avg_abund)
knitr::opts_chunk$set(echo = TRUE)
library("DT")
library("knitr")
library("dplyr")
library("tidyr")
library("broom")
library("vegan")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("data.table")
metadata <- fread("../mapping_file.csv")
names(metadata)[1] <- "sample"
metadata %>%
group_by(treatment,inoculation) %>%
dplyr::summarise(N=n()) %>%
spread(key = "inoculation", value = N)
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L2.txt", header = TRUE, skip = 1)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu$inoculation = metadata$inoculation[match(otu$sample,metadata$sample)]
## relative abundances
metadata_cols = names(metadata)[c(1,5,7)]
M <- select(otu,-all_of(metadata_cols))
M <- M/rowSums(M)
M <- bind_cols(select(otu, all_of(metadata_cols)),M)
otu = otu %>% relocate (treatment, inoculation, .after = sample)
metadata_cols = names(otu)[c(1,2,3)]
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "phylum")
mO$phylum <- gsub("^.*\\.","",mO$phylum)
mO$sample <- factor(mO$sample)
mO <- mO %>%
arrange(treatment)
m1 <- reshape2::melt(M,id.vars = metadata_cols, value.name = "counts", variable.name = "phylum")
m1$phylum <- gsub("^.*\\.","",m1$phylum)
m1$sample <- factor(m1$sample)
m1 <- m1 %>%
arrange(treatment)
# m1$sample <- paste(as.character(m1$sample),as.character(m1$timepoint),sep="-")
ordered_samples <- metadata %>%
arrange(treatment) %>%
select(treatment,sample)
m1$sample <- factor(m1$sample, levels = ordered_samples$sample)
m1$treatment <- factor(m1$treatment)
m1$inoculation <- factor(m1$inoculation)
D <- m1 %>%
group_by(phylum,treatment,inoculation) %>%
dplyr::summarise(N=n(), avg_abund = round(mean(counts),4), std = round(sd(counts),3)) %>%
filter(avg_abund>0.005) %>%
arrange(phylum,avg_abund)
phylum <- D %>%
group_by(phylum) %>%
dplyr::summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(treatment,phylum)
kable(D)
p <- ggplot(mO, aes(x=phylum,y=as.factor(sample),fill=counts))
p <- p + geom_tile()
p <- p + facet_grid(treatment~inoculation, scales = "free")
p <- p + ylab("sample")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1),axis.text.y = element_text(size=9))
p <- p + scale_fill_gradient2(low="ivory",high = "red")
p
my_palette = get_palette(c("#00AFBB", "#E7B800", "#FC4E07","darkgrey","beige"), length(unique(D$phylum)))
p <- ggplot(D, aes(x=factor(1), y=avg_abund, fill=phylum)) + geom_bar(width=4,stat="identity", colour="black", size=0.2)
p <- p + facet_grid(inoculation~treatment)
#p <- p + coord_polar(theta='y')
p <- p + xlab("relative abundances") + ylab("")
p <- p + scale_fill_manual(values = my_palette)
p <- p + theme(text = element_text(size=15),
axis.text.x = element_text(size=11),
# axis.text.y = element_text(size=12),
strip.text = element_text(size = 16),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(p)
#ggsave(filename = "../figures/phylum_piechart.png", height = 20, width = 20, plot = p, device = "png")
D <- D %>%
group_by(treatment) %>%
filter(avg_abund > 0.01) %>%
arrange(desc(avg_abund))
phylum <- D %>%
group_by(phylum) %>%
dplyr::summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(phylum)
D$taxa_level = rep("phylum", nrow(D))
otu <- fread("../results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt",header=TRUE, skip = 1)
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
names(otu)[1] <- "sample"
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu$inoculation = metadata$inoculation[match(otu$sample,metadata$sample)]
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "taxa")
mO$level <- sapply(mO$taxa, function(x) length(strsplit(as.character(x),";")[[1]]) )
##di seguito la funzione che divide le stringhe degli otu che sono messe come nomi delle colonne nei vari livelli tassonomici <3
get_taxa <- function(x,n) {
z <- strsplit(x, split = ";")
res = lapply(z, function(x) x[n])
return(unlist(res))
}
new_taxa <- c(NULL)
for (i in seq_along(mO$counts)) {
arg1 = as.character(mO$taxa[i])
arg2 = ifelse(mO$level[i] <= 6, mO$level[i], 6)
rr = get_taxa(arg1,arg2)
new_taxa <- c(new_taxa,rr)
}
mO$new_taxa <- new_taxa
table(mO$level)
neues <- c("phylum","class","order","family","genus")
altes <- seq(2,6)
mO$level <- neues[match(mO$level,altes)]
## relative abundances
mO <- mO %>%
dplyr::group_by(level,sample) %>%
dplyr::mutate(tot = sum(counts), rel_abundance = counts/tot)
D <- mO %>%
dplyr::group_by(level,new_taxa,treatment,inoculation) %>%
dplyr::summarise(avg_abund = round(mean(rel_abundance),4), std = round(sd(rel_abundance),3))
D <- D %>%
dplyr::group_by(new_taxa,inoculation,treatment) %>%
dplyr::filter(avg_abund > 0.01) %>%
arrange(level,desc(avg_abund))
kable(D)
D$level  <- factor(D$level,levels = c("phylum","class","order","family","genus"))
D0 <- D %>%
select(-c(std)) %>%
spread(treatment,avg_abund)
# D0[is.na(D0)] <- ""
bg.picker <- function(z) {
if(is.na(z)) {return(NULL)}
if(is.numeric(z)) {
if(z > 0.05 & z <= 0.10) {return("pink")}
if(z > 0.10) {return("yellow")}
}
}
library("formattable")
# formattable(D0, list(
#
#   `NA` = color_tile("white","green"),
#   `0` = color_tile("white","deepskyblue")
#   `AE1` = color_tile("white","yellow"),
#   `AE sintético 1` = color_tile("white","pink"),
#   `p-cimene` = color_tile("white","yellow"),
#   `γ-terpinene`=color_tile("white", "orange")
#   `Carvacrol`=color_tile("white", "gold")
#   `6 PR` = formatter("span",
#                   style = x ~ style(
#                     "border-radius" = "4px",
#                     "padding-right" = "4px",
#                     "background-color" = sapply(x, bg.picker))
#                   )
# ))
D$level  <- factor(D$level,levels = c("phylum","class","order","family","genus"))
D0 <- D %>%
select(-c(std)) %>%
spread(timepoint,avg_abund)
D$level  <- factor(D$level,levels = c("phylum","class","order","family","genus"))
D0 <- D %>%
select(-c(std)) %>%
spread(inoculation,avg_abund)
# D0[is.na(D0)] <- ""
bg.picker <- function(z) {
if(is.na(z)) {return(NULL)}
if(is.numeric(z)) {
if(z > 0.05 & z <= 0.10) {return("pink")}
if(z > 0.10) {return("yellow")}
}
}
library("formattable")
formattable(D0, list(
`0` = color_tile("white","yellow"),
`8` = color_tile("white","pink"),
`21` = color_tile("white","yellow"),
`28` = color_tile("white","pink")
# `5 PR` = color_tile("white","yellow"),
# `6 PR` = formatter("span",
#                 style = x ~ style(
#                   "border-radius" = "4px",
#                   "padding-right" = "4px",
#                   "background-color" = sapply(x, bg.picker))
#                 )
))
