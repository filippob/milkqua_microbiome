select(treatment,sample)
m1$sample <- factor(m1$sample, levels = ordered_samples$sample)
m1$treatment <- factor(m1$treatment)
m1$timepoint <- factor(m1$timepoint)
# Chunk 6
D <- m1 %>%
group_by(phylum,treatment,timepoint) %>%
summarise(N=n(), avg_abund = round(mean(counts),4), std = round(sd(counts),3)) %>%
filter(avg_abund>0.005) %>%
arrange(phylum,avg_abund)
phylum <- D %>%
group_by(phylum) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(treatment,phylum)
kable(D)
# Chunk 7
p <- ggplot(mO, aes(x=phylum,y=Cow_ID,fill=counts))
p <- p + geom_tile()
p <- p + facet_grid(treatment~timepoint, scales = "free")
p <- p + ylab("sample")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1),axis.text.y = element_text(size=9))
p <- p + scale_fill_gradient2(low="red",high = "blue")
p
#ggsave (p, height = 10, width = 20, filename = "taxonomy_count_MILK.png")
# Chunk 8
p <- ggplot(D, aes(x=factor(1), y=avg_abund, fill=phylum)) + geom_bar(width=1,stat="identity")
p <- p + facet_grid(timepoint~treatment)
#p <- p + coord_polar(theta='y', start=0) #activate this if you want a piechart
#p <- p + scale_fill_brewer(palette = "Set3")
p <- p + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.5), size=4, show.legend = F)
p <- p + guides(fill = guide_legend(title = "Phyla"))
p <- p + xlab("Relative abundances") + ylab("")
my_palette = get_palette(c("green3","gold","blue","magenta","cyan","yellow","red","gray","purple","brown","black", "darkorange1","pink1", "darkorchid1", "seagreen2"), length(unique(D$phylum)))
p <- p + xlab("relative abundances") + ylab("percentages")
p <- p + scale_fill_manual(values = my_palette)
p <- p + theme(text = element_text(size=10),
axis.text.x = element_text(size=8),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(p)
#ggsave(p, height = 20, width = 10, filename ="taxonomy_phylum_boxplot_MILK.png")
# Chunk 9
D <- D %>%
group_by(treatment) %>%
filter(avg_abund > 0.01) %>%
arrange(desc(avg_abund))
phylum <- D %>%
group_by(phylum) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
select(phylum,s)
D$phylum <- factor(D$phylum, levels = rev(phylum$phylum[order(phylum$s)]))
D <- D %>%
arrange(phylum)
D$taxa_level = rep("phylum", nrow(D))
otu <- fread("/home/oem/milkqua_microbiome/Results/results/taxa_summary_abs/mapping_file_L6.txt",header=TRUE)
names(otu)[1] <- "sample"
otu <- otu %>%
select(-c(index,index2,I7_Index_ID,I5_Index_ID,extraction_serial)) %>%
filter(sample_type == "milk")
otu$treatment = metadata$treatment[match(otu$Sample_ID,metadata$Sample_ID)]
otu$timepoint = metadata$timepoint[match(otu$Sample_ID,metadata$Sample_ID)]
otu$timepoint = factor(otu$timepoint, levels = c("0","8","21","28"))
mO <- reshape2::melt(otu,id.vars = metadata_cols, value.name = "counts", variable.name = "taxa")
mO$level <- sapply(mO$taxa, function(x) length(strsplit(as.character(x),";")[[1]]) )
get_taxa <- function(x,n) {
z <- strsplit(x, split = ";")
res = lapply(z, function(x) x[n])
return(unlist(res))
}
new_taxa <- c(NULL)
for (i in seq_along(mO$counts)) {
arg1 = as.character(mO$taxa[i])
arg2 = ifelse(mO$level[i] <= 6, mO$level[i], 6)
rr = get_taxa(arg1,arg2)
new_taxa <- c(new_taxa,rr)
}
mO$new_taxa <- new_taxa
table(mO$level)
neues <- c("phylum","class","order","family","genus")
altes <- seq(2,6)
mO$level <- neues[match(mO$level,altes)]
## relative abundances
mO <- mO %>%
group_by(level,sample) %>%
mutate(tot = sum(counts), rel_abundance = counts/tot)
D <- mO %>%
group_by(level,new_taxa,treatment,timepoint) %>%
summarise(avg_abund = round(mean(rel_abundance),4), std = round(sd(rel_abundance),3))
# Chunk 10
D <- na.omit(D)
D <- D %>%
group_by(new_taxa,timepoint,treatment) %>%
filter(avg_abund > 0.01) %>%
arrange(level,desc(avg_abund))
kable(D)
# Chunk 11
Dclass <- D %>%
filter(level=="class")
p <- ggplot(Dclass, aes(x=factor(1), y=avg_abund, fill=new_taxa)) + geom_bar(width=1,stat="identity", position = "fill")
p <- p + facet_grid(timepoint~treatment)
p <- p + guides(fill = guide_legend(title = "Class"))
p <- p + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.5), size=4, show.legend = F)
my_palette = get_palette(c("green3","gold","blue","magenta","cyan","yellow","red","gray","purple", "darkorange1","pink1", "darkorchid1", "seagreen2"), length(unique(Dclass$new_taxa)))
p <- p + xlab("relative abundances") + ylab("percentages")
p <- p + scale_fill_manual(values = my_palette)
p <- p + theme(text = element_text(size=10),
axis.text.x = element_text(size=8),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(p)
#ggsave(p, height = 8, width = 8, filename ="taxonomy_class_bargraph_milk.png")
# Chunk 12
Dfamily <- D %>%
filter(level=="family")
p <- ggplot(Dfamily, aes(x=factor(1), y=avg_abund, fill=new_taxa)) + geom_bar(width=1,stat="identity", position = "fill")
p <- p + facet_grid(timepoint~treatment)
p <- p + guides(fill = guide_legend(title = "Family"))
#p <- p + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.5), size=4, show.legend = F)
my_palette2 = get_palette(c("green3","gold","blue","magenta","cyan","yellow","red","gray","purple","brown","black", "darkorange1","pink1", "darkorchid1", "seagreen2", "darkmagenta", "burlywood1", "maroon", "darkred", "burlywood3", "chartreuse4", "coral", "peachpuff", "mediumorchid3", "yellow3", "turquoise4", "snow", "slategray3", "orangered", "olivedrab", "plum", "lightcyan", "gray38", "forestgreen", "firebrick1"), length(unique(Dfamily$new_taxa)))
p <- p + xlab("relative abundances") + ylab("percentages")
p <- p + scale_fill_manual(values = my_palette2)
p <- p + theme(text = element_text(size=10),
axis.text.x = element_text(size=8),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
p
#ggsave(p, height = 8, width = 8, filename ="taxonomy_family_bargraph_MILK.png")
Dgenera <- D %>%
filter(level=="genus")
p <- ggplot(Dgenera, aes(x=factor(1), y=avg_abund, fill=new_taxa)) + geom_bar(width=1,stat="identity", position = "fill")
p <- p + facet_grid(timepoint~treatment)
p <- p + guides(fill = guide_legend(title = "Genera"))
my_palette2 = get_palette(c("green3","gold","blue","magenta","cyan","yellow","red","gray","purple","brown","black", "darkorange1","pink1", "darkorchid1", "seagreen2", "darkmagenta", "burlywood1", "maroon", "darkred", "burlywood3", "chartreuse4", "coral", "peachpuff", "mediumorchid3", "yellow3", "turquoise4", "snow", "slategray3", "orangered", "olivedrab", "plum", "lightcyan", "gray38", "forestgreen", "firebrick1"), length(unique(Dgenera$new_taxa)))
p <- p + xlab("relative abundances") + ylab("percentages")
p <- p + scale_fill_manual(values = my_palette2)
p <- p + theme(text = element_text(size=10),
axis.text.x = element_text(size=8),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=3),
legend.title=element_text(size=3))
print(p)
#ggsave(p, height = 8, width = 8, filename ="taxonomy_genera_bargraph_MILK.png")
Dgenera <- D %>%
filter(level=="genus")
p <- ggplot(Dgenera, aes(x=factor(1), y=avg_abund, fill=new_taxa)) + geom_bar(width=1,stat="identity", position = "fill")
p <- p + facet_grid(timepoint~treatment)
p <- p + guides(fill = guide_legend(title = "Genera"))
my_palette2 = get_palette(c("green3","gold","blue","magenta","cyan","yellow","red","gray","purple","brown","black", "darkorange1","pink1", "darkorchid1", "seagreen2", "darkmagenta", "burlywood1", "maroon", "darkred", "burlywood3", "chartreuse4", "coral", "peachpuff", "mediumorchid3", "yellow3", "turquoise4", "snow", "slategray3", "orangered", "olivedrab", "plum", "lightcyan", "gray38", "forestgreen", "firebrick1"), length(unique(Dgenera$new_taxa)))
p <- p + xlab("relative abundances") + ylab("percentages")
p <- p + scale_fill_manual(values = my_palette2)
p <- p + theme(text = element_text(size=10),
axis.text.x = element_text(size=8),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=5),
legend.title=element_text(size=5))
print(p)
#ggsave(p, height = 8, width = 8, filename ="taxonomy_genera_bargraph_MILK.png")
Dfamily <- D %>%
filter(level=="family")
p <- ggplot(Dfamily, aes(x=factor(1), y=avg_abund, fill=new_taxa)) + geom_bar(width=1,stat="identity", position = "fill")
p <- p + facet_grid(timepoint~treatment)
p <- p + guides(fill = guide_legend(title = "Family"))
#p <- p + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.5), size=4, show.legend = F)
my_palette2 = get_palette(c("green3","gold","blue","magenta","cyan","yellow","red","gray","purple","brown","black", "darkorange1","pink1", "darkorchid1", "seagreen2", "darkmagenta", "burlywood1", "maroon", "darkred", "burlywood3", "chartreuse4", "coral", "peachpuff", "mediumorchid3", "yellow3", "turquoise4", "snow", "slategray3", "orangered", "olivedrab", "plum", "lightcyan", "gray38", "forestgreen", "firebrick1"), length(unique(Dfamily$new_taxa)))
p <- p + xlab("relative abundances") + ylab("percentages")
p <- p + scale_fill_manual(values = my_palette2)
p <- p + theme(text = element_text(size=10),
axis.text.x = element_text(size=8),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
p
#ggsave(p, height = 8, width = 8, filename ="taxonomy_family_bargraph_MILK.png")
Dclass <- D %>%
filter(level=="class")
p <- ggplot(Dclass, aes(x=factor(1), y=avg_abund, fill=new_taxa)) + geom_bar(width=1,stat="identity", position = "fill")
p <- p + facet_grid(timepoint~treatment)
p <- p + guides(fill = guide_legend(title = "Class"))
p <- p + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.5), size=4, show.legend = F)
my_palette = get_palette(c("green3","gold","blue","magenta","cyan","yellow","red","gray","purple", "darkorange1","pink1", "darkorchid1", "seagreen2"), length(unique(Dclass$new_taxa)))
p <- p + xlab("relative abundances") + ylab("percentages")
p <- p + scale_fill_manual(values = my_palette)
p <- p + theme(text = element_text(size=10),
axis.text.x = element_text(size=8),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(p)
#ggsave(p, height = 8, width = 8, filename ="taxonomy_class_bargraph_milk.png")
library("knitr")
library("broom")
# library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
library("reshape2")
library("data.table")
joined_pairs <- read.csv("/home/oem/milkqua_microbiome/Results/results/readsPerSample",sep="\t",header = FALSE,skip = 1, stringsAsFactors = FALSE)
nReads <- as.numeric(joined_pairs$V1[seq(2,nrow(joined_pairs)-1,by=2)])
samples <- joined_pairs$V1[seq(1,nrow(joined_pairs)-1,by=2)]
joined_pairs <- data.frame("sample"=samples,"reads"=nReads)
joined_pairs$reads <- joined_pairs$reads/4 ## dividing by 4 (fastq file format)
D <- joined_pairs %>%
filter(!grepl("UndeterminedUndetermined",sample)) %>%
dplyr::summarize(
n=n(),
avgReads=mean(reads),
sdReads = sd(reads),
maxReads=round(max(reads),3),
minReads=round(min(reads),3)
)
kable(D)
mPaired <- reshape2::melt(joined_pairs %>% filter(!grepl("UndeterminedUndetermined",sample)),id.vars=c("sample"))
p <- ggplot(mPaired,aes(x=sample,y=value)) + geom_bar(aes(fill=sample), stat = "identity")
p <- p + guides(fill=FALSE)
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, size=3))
print(p)
inputSeqs <- read.table("/home/oem/milkqua_microbiome/Results/results/inputSeqs",sep=":")
outputSeqs <- read.table("/home/oem/milkqua_microbiome/Results/results/outputSeqs", sep="\t")
samples <- read.table("//home/oem/milkqua_microbiome/Results/results/samples.txt", sep=":")
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
samples$V2 <- gsub("/storage/core/metabarcoding_milkqua/Analysis/multiple_join_paired_ends/","",samples$V2)
samples$V1 <- NULL
samples$V3 <- NULL
samples$V2 <- gsub("/.*","",samples$V2)
samples$V2 <- trim(samples$V2)
samples$V2 <- gsub("^\\d*-","",samples$V2)
samples$V2 <- gsub("_S.*$","",samples$V2)
samples <- samples %>%
rowwise() %>%
mutate(n=ifelse(nchar(as.character(V2))==9,gsub("[0-9]{1}$","",V2),gsub("[0-9]{2}$","",V2)))
samples$V2 <- NULL
names(samples)[1] <- "sample"
seqs <- cbind.data.frame(samples,inputSeqs$V2,outputSeqs$V2)
names(seqs) <- c("sample","input","output")
# detach("package:plyr", unload=TRUE)
seqs <- seqs %>%
group_by(sample) %>%
summarise(inpSeqs=sum(input),outSeqs=sum(output))
seqs <- seqs %>%
mutate(loss=(inpSeqs-outSeqs)/inpSeqs) %>%
arrange(loss)
kable(seqs)
# write.table(seqs, file="afterSplit.csv",sep=",",quote=FALSE,row.names=FALSE)
D <- seqs
DD <- D %>%
# .(group),
summarize(
"inputSeq"=sum(inpSeqs),
"outputSeqs"=sum(outSeqs),
"avgInp"=mean(inpSeqs),
"avgOutput"=mean(outSeqs),
"stdInp"=sd(inpSeqs),
"stdOutput"=sd(outSeqs,na.rm=TRUE)
)
kable(DD)
d1 <- D %>%
mutate(retained=outSeqs/inpSeqs) %>%
summarize(maxRetained=max(retained),minRetained=min(retained),avgRetained=mean(retained))
kable(d1)
# d2 <- D %>%
#   summarize(sum(inpSeqs),sum(outSeqs))
#
# kable(d2)
mS <- reshape2::melt(seqs,id.vars = c("sample","loss"), variable.name = "seq", value.name = "reads")
mS <- mS %>%
filter(!grepl("Undetermined",sample)) %>%
arrange(reads)
seqs <- seqs %>%
mutate(nloss = inpSeqs-outSeqs) %>%
arrange(nloss)
mS$sample <- factor(mS$sample, levels = seqs$sample)
p <- ggplot(mS, aes(x=sample,y=reads,group=seq)) + geom_line(aes(colour=seq))
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, size=4))
p
mapfile <- fread("/home/mycelium/milkqua_project/Mapping_file/mapping_file_def.csv", header = TRUE)
mapfile <- fread("/home/oem/milkqua_microbiome/Results/mapping_file_milk_alltimepoints_skin_T0beforeafter.csv", header = TRUE)
mapfile$sample <- paste("Sample",sapply(mapfile$`#SampleID`, function(x) substr(x,1,nchar(x)/2)),sep="_")
seqs <- seqs %>%
inner_join(mapfile, by = "sample")
seqs %>%
summarise(avg_seq = mean(outSeqs), std_seqs = sd(outSeqs)) %>%
kable()
seqs %>%
group_by(sample_type) %>%
summarise(avg_seq = mean(outSeqs), std_seqs = sd(outSeqs)) %>%
kable()
seqs %>%
do(glance(lm(outSeqs~sample_type,.))) %>%
kable()
ggplot(seqs, aes( x = as.factor(sample_type), y = outSeqs)) + geom_boxplot(aes(fill=as.factor(sample_type)))
seqs %>%
group_by(ref) %>%
summarise(N=n(), avg_seq = mean(outSeqs), std_seqs = sd(outSeqs)) %>%
kable()
seqs %>%
do(tidy(lm(outSeqs~ref,.))) %>%
kable()
library("rstatix")
# pwc <- seqs %>% tukey_hsd(outSeqs ~ as.factor(timepoint))
# print(pwc)
ggplot(seqs, aes( x = as.factor(ref), y = outSeqs)) + geom_boxplot(aes(fill=as.factor(ref)))
library("knitr")
library("broom")
# library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
library("reshape2")
library("data.table")
joined_pairs <- read.csv("/home/oem/milkqua_microbiome/Results/results/readsPerSample",sep="\t",header = FALSE,skip = 1, stringsAsFactors = FALSE)
View(joined_pairs)
nReads <- as.numeric(joined_pairs$V1[seq(2,nrow(joined_pairs)-1,by=2)])
samples <- joined_pairs$V1[seq(1,nrow(joined_pairs)-1,by=2)]
joined_pairs <- data.frame("sample"=samples,"reads"=nReads)
joined_pairs$reads <- joined_pairs$reads/4 ## dividing by 4 (fastq file format)
D <- joined_pairs %>%
filter(!grepl("UndeterminedUndetermined",sample)) %>%
dplyr::summarize(
n=n(),
avgReads=mean(reads),
sdReads = sd(reads),
maxReads=round(max(reads),3),
minReads=round(min(reads),3)
)
kable(D)
inputSeqs <- read.table("/home/oem/milkqua_microbiome/Results/results/inputSeqs",sep=":")
View(inputSeqs)
outputSeqs <- read.table("/home/oem/milkqua_microbiome/Results/results/outputSeqs", sep="\t")
View(outputSeqs)
samples <- read.table("//home/oem/milkqua_microbiome/Results/results/samples.txt", sep=":")
View(samples)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
samples$V2 <- gsub("/storage/core/metabarcoding_milkqua/Analysis/multiple_join_paired_ends/","",samples$V2)
View(samples)
samples$V1 <- NULL
samples$V3 <- NULL
samples$V2 <- gsub("/.*","",samples$V2)
samples$V2 <- trim(samples$V2)
samples$V2 <- gsub("^\\d*-","",samples$V2)
samples$V2 <- gsub("_S.*$","",samples$V2)
samples <- samples %>%
rowwise() %>%
mutate(n=ifelse(nchar(as.character(V2))==9,gsub("[0-9]{1}$","",V2),gsub("[0-9]{2}$","",V2)))
samples$V2 <- NULL
names(samples)[1] <- "sample"
seqs <- cbind.data.frame(samples,inputSeqs$V2,outputSeqs$V2)
names(seqs) <- c("sample","input","output")
seqs <- seqs %>%
group_by(sample) %>%
summarise(inpSeqs=sum(input),outSeqs=sum(output))
seqs <- seqs %>%
mutate(loss=(inpSeqs-outSeqs)/inpSeqs) %>%
arrange(loss)
kable(seqs)
D <- seqs
DD <- D %>%
# .(group),
summarize(
"inputSeq"=sum(inpSeqs),
"outputSeqs"=sum(outSeqs),
"avgInp"=mean(inpSeqs),
"avgOutput"=mean(outSeqs),
"stdInp"=sd(inpSeqs),
"stdOutput"=sd(outSeqs,na.rm=TRUE)
)
kable(DD)
And the average proportion of retained reads for subsequent analysis:
```{r, echo=FALSE}
d1 <- D %>%
mutate(retained=outSeqs/inpSeqs) %>%
summarize(maxRetained=max(retained),minRetained=min(retained),avgRetained=mean(retained))
d1 <- D %>%
mutate(retained=outSeqs/inpSeqs) %>%
summarize(maxRetained=max(retained),minRetained=min(retained),avgRetained=mean(retained))
kable(d1)
mS <- reshape2::melt(seqs,id.vars = c("sample","loss"), variable.name = "seq", value.name = "reads")
mS <- mS %>%
filter(!grepl("Undetermined",sample)) %>%
arrange(reads)
seqs <- seqs %>%
mutate(nloss = inpSeqs-outSeqs) %>%
arrange(nloss)
mS$sample <- factor(mS$sample, levels = seqs$sample)
p <- ggplot(mS, aes(x=sample,y=reads,group=seq)) + geom_line(aes(colour=seq))
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, size=4))
p
metadata <- fread("/home/oem/milkqua_microbiome/Results/mapping_file_milk_alltimepoints_skin_T0beforeafter.csv")
names(metadata)[1] <- "sample"
metadata$Cow_ID <- paste(metadata$cow, metadata$ref)
alpha <- read.table("/home/oem/milkqua_microbiome/Results/results/alpha_diversity/alpha.txt", header = TRUE)
alpha$sample <- row.names(alpha)
alpha$observed_species <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
mAlpha$type <- metadata$sample_type[match(mAlpha$sample,metadata$sample)]
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$sample,metadata$sample)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$sample,metadata$sample)]
mAlpha <- filter(mAlpha, type == "milk") %>% select(-c(type))
View(mAlpha)
View(metadata)
metadata <- fread("/home/oem/milkqua_microbiome/Results/mapping_file_milk_alltimepoints_skin_T0beforeafter.csv")
names(metadata)[1] <- "sample"
metadata$Cow_ID <- paste(metadata$cow, metadata$ref)
View(metadata)
alpha <- read.table("/home/oem/milkqua_microbiome/Results/results/alpha_diversity/alpha.txt", header = TRUE)
alpha$sample <- row.names(alpha)
alpha$observed_species <- NULL
View(alpha)
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
View(mAlpha)
View(alpha)
View(mAlpha)
View(alpha)
View(mAlpha)
View(alpha)
View(mAlpha)
View(alpha)
mAlpha$type <- metadata$sample_type[match(mAlpha$sample,metadata$sample)]
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$sample,metadata$sample)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$sample,metadata$sample)]
mAlpha <- filter(mAlpha, type == "milk") %>% select(-c(type))
library("knitr")
library("broom")
# library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
library("reshape2")
library("data.table")
joined_pairs <- read.csv("/home/oem/milkqua_microbiome/Results/results/readsPerSample",sep="\t",header = FALSE,skip = 1, stringsAsFactors = FALSE)
nReads <- as.numeric(joined_pairs$V1[seq(2,nrow(joined_pairs)-1,by=2)])
samples <- joined_pairs$V1[seq(1,nrow(joined_pairs)-1,by=2)]
joined_pairs <- data.frame("sample"=samples,"reads"=nReads)
joined_pairs$reads <- joined_pairs$reads/4 ## dividing by 4 (fastq file format)
joined_pairs <- read.csv("/home/oem/milkqua_microbiome/Results/results/readsPerSample",sep="\t",header = FALSE,skip = 1, stringsAsFactors = FALSE)
View(joined_pairs)
nReads <- as.numeric(joined_pairs$V1[seq(2,nrow(joined_pairs)-1,by=2)])
samples <- joined_pairs$V1[seq(1,nrow(joined_pairs)-1,by=2)]
joined_pairs <- data.frame("sample"=samples,"reads"=nReads)
View(joined_pairs)
joined_pairs$reads <- joined_pairs$reads/4 ## dividing by 4 (fastq file format)
D <- joined_pairs %>%
filter(!grepl("UndeterminedUndetermined",sample)) %>%
dplyr::summarize(
n=n(),
avgReads=mean(reads),
sdReads = sd(reads),
maxReads=round(max(reads),3),
minReads=round(min(reads),3)
)
kable(D)
View(D)
View(joined_pairs)
mPaired <- reshape2::melt(joined_pairs %>% filter(!grepl("UndeterminedUndetermined",sample)),id.vars=c("sample"))
View(mPaired)
p <- ggplot(mPaired,aes(x=sample,y=value)) + geom_bar(aes(fill=sample), stat = "identity")
p <- p + guides(fill=FALSE)
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, size=3))
print(p)
mapfile <- fread("/home/oem/milkqua_microbiome/Results/mapping_file_milk_alltimepoints_skin_T0beforeafter.csv", header = TRUE)
View(mapfile)
joined_pairs <- read.csv("/home/oem/milkqua_microbiome/Results/results/readsPerSample",sep="\t",header = FALSE,skip = 1, stringsAsFactors = FALSE)
nReads <- as.numeric(joined_pairs$V1[seq(2,nrow(joined_pairs)-1,by=2)])
samples <- joined_pairs$V1[seq(1,nrow(joined_pairs)-1,by=2)]
joined_pairs <- data.frame("sample"=samples,"reads"=nReads)
joined_pairs$reads <- joined_pairs$reads/4 ## dividing by 4 (fastq file format)
library("knitr")
library("broom")
# library("plyr")
library("dplyr")
library("tidyr")
library("ggplot2")
library("reshape2")
library("data.table")
joined_pairs <- read.csv("/home/oem/milkqua_microbiome/Results/results/readsPerSample",sep="\t",header = FALSE,skip = 1, stringsAsFactors = FALSE)
nReads <- as.numeric(joined_pairs$V1[seq(2,nrow(joined_pairs)-1,by=2)])
samples <- joined_pairs$V1[seq(1,nrow(joined_pairs)-1,by=2)]
joined_pairs <- data.frame("sample"=samples,"reads"=nReads)
joined_pairs$reads <- joined_pairs$reads/4 ## dividing by 4 (fastq file format)
mapfile <- fread("/home/oem/milkqua_microbiome/Results/mapping_file_milk_alltimepoints_skin_T0beforeafter.csv", header = TRUE)
mapfile$sample <- paste("Sample",sapply(mapfile$`#SampleID`, function(x) substr(x,1,nchar(x)/2)),sep="_")
seqs <- seqs %>%
inner_join(mapfile, by = "sample")
