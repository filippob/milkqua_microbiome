temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp = make_comparison(temp, k)
res = bind_rows(res, temp)
temp2 = temp[temp$timepoint == "T2", ]
temp = make_comparison(temp, k)
res = bind_rows(res, temp)
# res['Timepoint'] = 'T1'
}
write.csv(res, "~/Results/SKINSWABS/results/Bootstrap_res.csv")
}
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
View(temp)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
res = bind_rows(res, temp1)
temp2 = temp[temp$timepoint == "T2", ]
temp2 = make_comparison(temp2, k)
res = bind_rows(res, temp2)
View(res)
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
res$timepoint == "T1"
res = bind_rows(res, temp1)
View(res)
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
res['Timepoint'] = 'T1'
res = bind_rows(res, temp1)
temp2 = temp[temp$timepoint == "T2", ]
temp2 = make_comparison(temp2, k)
res['Timepoint'] = 'T2'
res = bind_rows(res, temp2)
View(res)
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
temp1['Timepoint'] = 'T1'
res = bind_rows(res, temp1)
temp2 = temp[temp$timepoint == "T2", ]
temp2 = make_comparison(temp2, k)
temp2['Timepoint'] = 'T2'
res = bind_rows(res, temp2)
View(res)
library("tidyverse")
library("data.table")
## PARAMETERS
HOME <- Sys.getenv("HOME")
prj_folder = file.path(HOME, "Results")
analysis_folder = "SKINSWABS"
fname = "results/alpha.csv"
conf_file = "mapping_milkqua_skinswabs.csv"
outdir = file.path(analysis_folder)
metadata = fread (file.path(prj_folder, analysis_folder, conf_file))
metadata$`sample-id` <- gsub('-', '.', metadata$`sample-id`)
alpha = fread(file.path(prj_folder, analysis_folder, fname))
mAlpha <- reshape2::melt(alpha, id.vars = "sample-id", variable.name = "metric", value.name = "value")
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$`sample-id`,metadata$`sample-id`)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$`sample-id`,metadata$`sample-id`)]
mAlpha$timepoint[mAlpha$timepoint == "before_oil" ] <- "T0"
mAlpha$timepoint[mAlpha$timepoint == "after_oil" ] <- "T1"
mAlpha$timepoint[mAlpha$timepoint == "8" ] <- "T2"
bl_medie <- mAlpha %>%
filter(timepoint=="T0") %>%
group_by(metric,treatment) %>%
summarize(media_bl=mean(value))
bl_counts <- mAlpha %>%
group_by(metric,treatment) %>%
filter(timepoint=="T0") %>%
arrange(metric) %>%
rename(value.bl = value)
M <- merge(mAlpha,bl_counts[,c(1,2,3)],by=c("metric","sample-id"),all.x = TRUE)
M1 <- M%>%
filter(!is.na(M$value.bl))
M2 <- M %>%
filter(is.na(value.bl)) %>%
mutate(value.bl=replace(value.bl,is.na(value.bl),right_join(bl_medie, ., by =c("metric","treatment"))$media_bl))
M <- rbind.data.frame(M1,M2)
M <- M %>%
mutate(corrected_counts=value-value.bl) %>%
filter(value!=0) %>%
arrange(`sample-id`)
M <- M %>%
group_by(metric) %>%
mutate(scaled_counts=scales::rescale(corrected_counts,c(0,100)))
# Balpha <- M %>% filter(timepoint == "T1") # options are T1 and T2
# Balpha <- Balpha %>% filter (metric == "Shannon") # options are "Observed", "Chao1", "se.chao1","ACE","se.ACE","Shannon","Simpson","InvSimpson","Fisher"
# Balpha <- Balpha %>% spread(metric, corrected_counts)
M <- M[-c(3,6,8)]
alpe <- M %>% spread(metric, corrected_counts)
Indexes <- colnames(alpe[4:12])
Timepoints <- c("T1", "T2")
boot_sample = function(data,index) {
n = nrow(data)
vec = sample(1:n, n, replace = TRUE)
temp = data[vec,]
vec = c("sample-id", index)
temp = dplyr::select(temp, all_of(vec))
temp$treatment <- mAlpha$treatment[match(temp$`sample-id`,mAlpha$`sample-id`)]
temp$timepoint <- mAlpha$timepoint[match(temp$`sample-id`,mAlpha$`sample-id`)]
return(temp)
}
make_comparison = function(btstr_data,index) {
## we rely on the assumption that the 2nd column is the alpha index
## and the 3rd column is the experimental group
names(btstr_data)[2] = "index"
names(btstr_data)[3] = "treatment"
fit = lm(index ~ treatment, data = btstr_data)
## retrieve results
coefficient = as.numeric(coef(fit)[2])
stat = anova(fit)[,"F value"][1]
pval = anova(fit)[,"Pr(>F)"][1]
temp = data.frame("index"=index, "stat"=stat, "pval"=pval, "coef"=coefficient)
return(temp)
}
res = data.frame("index"=NULL, "stat"=NULL, "pval"=NULL, "coef"=NULL, "timepoint"=NULL)
for (k in Indexes) {
for (i in 1:1) {
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
temp1['Timepoint'] = 'T1'
res = bind_rows(res, temp1)
temp2 = temp[temp$timepoint == "T2", ]
temp2 = make_comparison(temp2, k)
temp2['Timepoint'] = 'T2'
res = bind_rows(res, temp2)
# res['Timepoint'] = 'T1'
}
write.csv(res, "~/Results/SKINSWABS/results/Bootstrap_res.csv")
}
# res = res[order(res$pval, decreasing = TRUE),]
# res = res[order(res$pval, decreasing = TRUE),]
# print(paste("p-value median is", median(res$pval)))
# png("barplot.png")
# png("barplot.png")
# barplot(height = res$pval)
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
# png("barplot.png")
# barplot(height = res$pval)
# dev.off()
View(res)
library("tidyverse")
library("data.table")
## PARAMETERS
HOME <- Sys.getenv("HOME")
prj_folder = file.path(HOME, "Results")
analysis_folder = "SKINSWABS"
fname = "results/alpha.csv"
conf_file = "mapping_milkqua_skinswabs.csv"
outdir = file.path(analysis_folder)
metadata = fread (file.path(prj_folder, analysis_folder, conf_file))
metadata$`sample-id` <- gsub('-', '.', metadata$`sample-id`)
alpha = fread(file.path(prj_folder, analysis_folder, fname))
mAlpha <- reshape2::melt(alpha, id.vars = "sample-id", variable.name = "metric", value.name = "value")
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$`sample-id`,metadata$`sample-id`)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$`sample-id`,metadata$`sample-id`)]
mAlpha$timepoint[mAlpha$timepoint == "before_oil" ] <- "T0"
mAlpha$timepoint[mAlpha$timepoint == "after_oil" ] <- "T1"
mAlpha$timepoint[mAlpha$timepoint == "8" ] <- "T2"
bl_medie <- mAlpha %>%
filter(timepoint=="T0") %>%
group_by(metric,treatment) %>%
summarize(media_bl=mean(value))
bl_counts <- mAlpha %>%
group_by(metric,treatment) %>%
filter(timepoint=="T0") %>%
arrange(metric) %>%
rename(value.bl = value)
M <- merge(mAlpha,bl_counts[,c(1,2,3)],by=c("metric","sample-id"),all.x = TRUE)
M1 <- M%>%
filter(!is.na(M$value.bl))
M2 <- M %>%
filter(is.na(value.bl)) %>%
mutate(value.bl=replace(value.bl,is.na(value.bl),right_join(bl_medie, ., by =c("metric","treatment"))$media_bl))
M <- rbind.data.frame(M1,M2)
M <- M %>%
mutate(corrected_counts=value-value.bl) %>%
filter(value!=0) %>%
arrange(`sample-id`)
M <- M %>%
group_by(metric) %>%
mutate(scaled_counts=scales::rescale(corrected_counts,c(0,100)))
# Balpha <- M %>% filter(timepoint == "T1") # options are T1 and T2
# Balpha <- Balpha %>% filter (metric == "Shannon") # options are "Observed", "Chao1", "se.chao1","ACE","se.ACE","Shannon","Simpson","InvSimpson","Fisher"
# Balpha <- Balpha %>% spread(metric, corrected_counts)
M <- M[-c(3,6,8)]
alpe <- M %>% spread(metric, corrected_counts)
Indexes <- colnames(alpe[4:12])
Timepoints <- c("T1", "T2")
boot_sample = function(data,index) {
n = nrow(data)
vec = sample(1:n, n, replace = TRUE)
temp = data[vec,]
vec = c("sample-id", index)
temp = dplyr::select(temp, all_of(vec))
temp$treatment <- mAlpha$treatment[match(temp$`sample-id`,mAlpha$`sample-id`)]
temp$timepoint <- mAlpha$timepoint[match(temp$`sample-id`,mAlpha$`sample-id`)]
return(temp)
}
make_comparison = function(btstr_data,index) {
## we rely on the assumption that the 2nd column is the alpha index
## and the 3rd column is the experimental group
names(btstr_data)[2] = "index"
names(btstr_data)[3] = "treatment"
fit = lm(index ~ treatment, data = btstr_data)
## retrieve results
coefficient = as.numeric(coef(fit)[2])
stat = anova(fit)[,"F value"][1]
pval = anova(fit)[,"Pr(>F)"][1]
temp = data.frame("index"=index, "stat"=stat, "pval"=pval, "coef"=coefficient)
return(temp)
}
res = data.frame("index"=NULL, "stat"=NULL, "pval"=NULL, "coef"=NULL, "timepoint"=NULL)
for (k in Indexes) {
for (i in 1:1000) {
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
temp1['Timepoint'] = 'T1'
res = bind_rows(res, temp1)
temp2 = temp[temp$timepoint == "T2", ]
temp2 = make_comparison(temp2, k)
temp2['Timepoint'] = 'T2'
res = bind_rows(res, temp2)
# res['Timepoint'] = 'T1'
}
write.csv(res, "~/Results/SKINSWABS/results/Bootstrap_res.csv")
}
View(res)
View(temp1)
library("tidyverse")
library("data.table")
## PARAMETERS
HOME <- Sys.getenv("HOME")
prj_folder = file.path(HOME, "Results")
analysis_folder = "SKINSWABS"
fname = "results/alpha.csv"
conf_file = "mapping_milkqua_skinswabs.csv"
outdir = file.path(analysis_folder)
metadata = fread (file.path(prj_folder, analysis_folder, conf_file))
metadata$`sample-id` <- gsub('-', '.', metadata$`sample-id`)
alpha = fread(file.path(prj_folder, analysis_folder, fname))
mAlpha <- reshape2::melt(alpha, id.vars = "sample-id", variable.name = "metric", value.name = "value")
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$`sample-id`,metadata$`sample-id`)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$`sample-id`,metadata$`sample-id`)]
mAlpha$timepoint[mAlpha$timepoint == "before_oil" ] <- "T0"
mAlpha$timepoint[mAlpha$timepoint == "after_oil" ] <- "T1"
mAlpha$timepoint[mAlpha$timepoint == "8" ] <- "T2"
bl_medie <- mAlpha %>%
filter(timepoint=="T0") %>%
group_by(metric,treatment) %>%
summarize(media_bl=mean(value))
bl_counts <- mAlpha %>%
group_by(metric,treatment) %>%
filter(timepoint=="T0") %>%
arrange(metric) %>%
rename(value.bl = value)
M <- merge(mAlpha,bl_counts[,c(1,2,3)],by=c("metric","sample-id"),all.x = TRUE)
M1 <- M%>%
filter(!is.na(M$value.bl))
M2 <- M %>%
filter(is.na(value.bl)) %>%
mutate(value.bl=replace(value.bl,is.na(value.bl),right_join(bl_medie, ., by =c("metric","treatment"))$media_bl))
M <- rbind.data.frame(M1,M2)
M <- M %>%
mutate(corrected_counts=value-value.bl) %>%
filter(value!=0) %>%
arrange(`sample-id`)
M <- M %>%
group_by(metric) %>%
mutate(scaled_counts=scales::rescale(corrected_counts,c(0,100)))
# Balpha <- M %>% filter(timepoint == "T1") # options are T1 and T2
# Balpha <- Balpha %>% filter (metric == "Shannon") # options are "Observed", "Chao1", "se.chao1","ACE","se.ACE","Shannon","Simpson","InvSimpson","Fisher"
# Balpha <- Balpha %>% spread(metric, corrected_counts)
M <- M[-c(3,6,8)]
alpe <- M %>% spread(metric, corrected_counts)
Indexes <- colnames(alpe[4:12])
Timepoints <- c("T1", "T2")
boot_sample = function(data,index) {
n = nrow(data)
vec = sample(1:n, n, replace = TRUE)
temp = data[vec,]
vec = c("sample-id", index)
temp = dplyr::select(temp, all_of(vec))
temp$treatment <- mAlpha$treatment[match(temp$`sample-id`,mAlpha$`sample-id`)]
temp$timepoint <- mAlpha$timepoint[match(temp$`sample-id`,mAlpha$`sample-id`)]
return(temp)
}
make_comparison = function(btstr_data,index) {
## we rely on the assumption that the 2nd column is the alpha index
## and the 3rd column is the experimental group
names(btstr_data)[2] = "index"
names(btstr_data)[3] = "treatment"
fit = lm(index ~ treatment, data = btstr_data)
## retrieve results
coefficient = as.numeric(coef(fit)[2])
stat = anova(fit)[,"F value"][1]
pval = anova(fit)[,"Pr(>F)"][1]
temp = data.frame("index"=index, "stat"=stat, "pval"=pval, "coef"=coefficient)
return(temp)
}
res = data.frame("index"=NULL, "stat"=NULL, "pval"=NULL, "coef"=NULL, "timepoint"=NULL)
for (k in Indexes) {
for (i in 1:1000) {
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
temp1['Timepoint'] = 'T1'
res = bind_rows(res, temp1)
temp2 = temp[temp$timepoint == "T2", ]
temp2 = make_comparison(temp2, k)
temp2['Timepoint'] = 'T2'
res = bind_rows(res, temp2)
}
write.csv(res, "~/Results/SKINSWABS/results/Bootstrap_res.csv")
}
View(res)
View(alpe)
alpe <- alpe[alpe$timepoint != "T0",]
View(alpe)
Indexes <- colnames(alpe[4:12])
Timepoints <- c("T1", "T2")
boot_sample = function(data,index) {
n = nrow(data)
vec = sample(1:n, n, replace = TRUE)
temp = data[vec,]
vec = c("sample-id", index)
temp = dplyr::select(temp, all_of(vec))
temp$treatment <- mAlpha$treatment[match(temp$`sample-id`,mAlpha$`sample-id`)]
temp$timepoint <- mAlpha$timepoint[match(temp$`sample-id`,mAlpha$`sample-id`)]
return(temp)
}
make_comparison = function(btstr_data,index) {
## we rely on the assumption that the 2nd column is the alpha index
## and the 3rd column is the experimental group
names(btstr_data)[2] = "index"
names(btstr_data)[3] = "treatment"
fit = lm(index ~ treatment, data = btstr_data)
## retrieve results
coefficient = as.numeric(coef(fit)[2])
stat = anova(fit)[,"F value"][1]
pval = anova(fit)[,"Pr(>F)"][1]
temp = data.frame("index"=index, "stat"=stat, "pval"=pval, "coef"=coefficient)
return(temp)
}
res = data.frame("index"=NULL, "stat"=NULL, "pval"=NULL, "coef"=NULL, "timepoint"=NULL)
for (k in Indexes) {
for (i in 1:1000) {
print(paste("bootstrap replicate n.", i))
temp = boot_sample(alpe, k)
temp1 = temp[temp$timepoint == "T1", ]
temp1 = make_comparison(temp1, k)
temp1['Timepoint'] = 'T1'
res = bind_rows(res, temp1)
temp2 = temp[temp$timepoint == "T2", ]
temp2 = make_comparison(temp2, k)
temp2['Timepoint'] = 'T2'
res = bind_rows(res, temp2)
}
write.csv(res, "~/Results/SKINSWABS/results/Bootstrap_res.csv")
}
library("DT")
library("knitr")
library("tidyr")
library("broom")
library("vegan")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("tidyverse")
library("data.table")
library("ggrepel")
#project_folder = "~/Documents/MILKQUA"
metadata <- fread("/home/oem/Results/RUMEN/mapping_file_rumen.csv")
otu <- fread("/home/oem/Results/RUMEN/results/taxa_summary_abs/CSS_normalized_otu_table_L6.txt", header = TRUE, skip = 1)
library("broom")
library("vegan")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("tidyverse")
library("data.table")
names(metadata)[1] <- "sample"
metadata$treatment[ which(metadata$treatment == "no treatment (ruminal liquid + diet)")] <- "Control"
metadata$treatment[ which(metadata$treatment == "AE1")] <- "NEO"
metadata$treatment[ which(metadata$treatment == "AE sintético 1")] <- "SEO"
metadata$treatment[ which(metadata$treatment == "γ-terpinene")] <- "g-terpinene"
meta_subset <- filter(metadata, treatment !="ruminal liquid")
otu <- fread("/home/oem/Results/RUMEN/results/taxa_summary_abs/CSS_normalized_otu_table_L2.txt", header = TRUE, skip = 1)
otu$`#OTU ID` <- gsub("^.*;","",otu$"#OTU ID")
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu <- filter(otu, sample %in% meta_subset$sample)
## F:B ratio
mO <- gather(otu, key = "phylum", value = "counts", -c(sample,treatment))
mO <- filter(mO, phylum %in% c("Bacteroidetes", "Firmicutes")) %>% spread(key = "phylum", value = "counts")
D <- mO %>%
select(sample, treatment, Bacteroidetes, Firmicutes) %>%
group_by(treatment) %>%
mutate(ratio=Firmicutes/Bacteroidetes) %>%
summarize("F/B_avg"=mean(ratio),"B_avg"=mean(Bacteroidetes),"F_avg"=mean(Firmicutes),
"F/B_med"=median(ratio),"B_med"=median(Bacteroidetes),"F_med"=median(Firmicutes))
## significance of differences
treatments = arrange(D, `F/B_avg`) %>% pull(treatment)
treatments = c("Control",treatments[treatments != "Control" ])
mO$treatment <- factor(mO$treatment, levels = treatments)
D <- D[match(treatments, D$treatment),]
mO %>%
select(sample, treatment, Bacteroidetes, Firmicutes) %>%
mutate(ratio=Firmicutes/Bacteroidetes) %>%
do(glance(lm(ratio ~ treatment, .)))
temp <- mO %>%
select(sample, treatment, Bacteroidetes, Firmicutes) %>%
mutate(ratio=Firmicutes/Bacteroidetes) %>%
do(tidy(lm(ratio ~ treatment, .))) %>%
mutate(term = gsub("treatment","",term))
select(D, c(treatment,B_avg,F_avg,`F/B_avg`,`F/B_med`)) %>%
left_join(temp, by = c("treatment"="term")) %>%
fwrite("~/fb_ratio_stats.csv"), col.names = TRUE)
select(D, c(treatment,B_avg,F_avg,`F/B_avg`,`F/B_med`)) %>%
left_join(temp, by = c("treatment"="term")) %>%
fwrite("~/fb_ratio_stats.csv", col.names = TRUE)
View(temp)
View(mO)
View(D)
View(temp)
#project_folder = "~/Documents/MILKQUA"
metadata <- fread("/home/oem/Results/RUMEN/mapping_file_rumen.csv")
otu <- fread("/home/oem/Results/RUMEN/results/taxa_summary_abs/CSS_normalized_otu_table_L2.txt", header = TRUE, skip = 1)
names(metadata)[1] <- "sample"
metadata$treatment[ which(metadata$treatment == "no treatment (ruminal liquid + diet)")] <- "Control"
metadata$treatment[ which(metadata$treatment == "AE1")] <- "NEO"
metadata$treatment[ which(metadata$treatment == "AE sintético 1")] <- "SEO"
metadata$treatment[ which(metadata$treatment == "γ-terpinene")] <- "g-terpinene"
meta_subset <- filter(metadata, treatment !="ruminal liquid")
otu$`#OTU ID` <- gsub("^.*;","",otu$"#OTU ID")
otu <- gather(otu, key = "sample", value ="counts", -`#OTU ID`) %>% spread(key = `#OTU ID`, value = counts)
otu$treatment = metadata$treatment[match(otu$sample,metadata$sample)]
otu <- filter(otu, sample %in% meta_subset$sample)
## F:B ratio
mO <- gather(otu, key = "phylum", value = "counts", -c(sample,treatment))
mO <- filter(mO, phylum %in% c("Bacteroidetes", "Firmicutes")) %>% spread(key = "phylum", value = "counts")
View(otu)
View(mO)
D <- mO %>%
select(sample, treatment, Bacteroidetes, Firmicutes) %>%
group_by(treatment) %>%
mutate(ratio=Firmicutes/Bacteroidetes) %>%
summarize("F/B_avg"=mean(ratio),"B_avg"=mean(Bacteroidetes),"F_avg"=mean(Firmicutes),
"F/B_med"=median(ratio),"B_med"=median(Bacteroidetes),"F_med"=median(Firmicutes))
View(D)
## significance of differences
treatments = arrange(D, `F/B_avg`) %>% pull(treatment)
treatments = c("Control",treatments[treatments != "Control" ])
mO$treatment <- factor(mO$treatment, levels = treatments)
D <- D[match(treatments, D$treatment),]
mO %>%
select(sample, treatment, Bacteroidetes, Firmicutes) %>%
mutate(ratio=Firmicutes/Bacteroidetes) %>%
do(glance(lm(ratio ~ treatment, .)))
View(mO)
temp <- mO %>%
select(sample, treatment, Bacteroidetes, Firmicutes) %>%
mutate(ratio=Firmicutes/Bacteroidetes) %>%
do(tidy(lm(ratio ~ treatment, .))) %>%
mutate(term = gsub("treatment","",term))
View(temp)
