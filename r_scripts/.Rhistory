mutate(tot = sum(counts), rel_abundance = counts/tot)
D <- mO %>%
group_by(level,new_taxa,treatment,timepoint) %>%
summarise(avg_abund = round(mean(rel_abundance),4), std = round(sd(rel_abundance),3))
D <- na.omit(D)
D <- D %>%
group_by(new_taxa,timepoint,treatment) %>%
#  filter(avg_abund > 0.01) %>%
arrange(level,desc(avg_abund))
kable(D)
m1 <- mO %>%
filter(!is.na(level)) %>%
arrange(level,treatment)
D <- m1 %>%
group_by(level, new_taxa) %>%
do(tidy(anova(lm(counts ~ treatment, data = .)))) %>%
filter(term == "treatment")
D$level  <- factor(D$level,levels = c("genus"))
D <- D %>%
arrange(level,new_taxa)
datatable(D, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
# write.csv(D, "~/Results/STOOLS/results/taxonomy_one.csv")
m1 <- mO %>%
arrange(level,treatment)
save(m1, file = "~/Results/STOOLS/results/m1_T2.RData")
dd_counts <- mO %>%
group_by(level, new_taxa,timepoint,treatment) %>%
# summarise(avg = mean(counts)) %>%
summarise(avg = mean(rel_abundance)) %>%
spread(key = "treatment", value = "avg")
group_by(dd_counts, level) %>% summarise(tot = sum(EO))
D <- m1 %>%
group_by(level, new_taxa, timepoint) %>%
do(tidy(anova(lm(counts ~ treatment, data = .)))) %>%
filter(term == "treatment")
D$level  <- factor(D$level,levels = c("genus")) #, "species"
D <- D %>%
arrange(level,new_taxa)
datatable(D, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
DX <- D %>%
filter(`p.value` <= 0.05) %>%
dplyr::select(c(level,new_taxa, timepoint, `p.value`)) %>%
arrange(level,`p.value`)
D0 <- mO %>%
dplyr::group_by(level,new_taxa, timepoint,treatment) %>%
dplyr::summarise(avg_counts = mean(counts))
to_save = list(D,DX,D0)
save(to_save, file = "~/Results/STOOLS/results/taxonomy_stools_T2.RData")
load("~/Results/STOOLS/results/taxonomy_stools_T2.RData")
D <- to_save[[1]]
DX <- to_save[[2]]
D0 <- to_save[[3]]
dd <- spread(D0, key = treatment, value = avg_counts)
temp <- inner_join(DX,dd, by = c("level" = "level", "new_taxa" = "new_taxa", "timepoint"="timepoint"))
fwrite(temp, file = "~/Results/STOOLS/results/taxonomy_stools_significant_otus_T2.csv", col.names = TRUE, sep = ",")
print (dd)
# temp$new_taxa <- paste(temp$new_taxa,", Timepoint:", temp$timepoint)
# temp <- temp %>% filter(level == "genus")
load("~/Results/STOOLS/results/taxonomy_stools_T2.RData")
D <- to_save[[1]]
DX <- to_save[[2]]
D0 <- to_save[[3]]
D0 <- mutate(D0, avg_counts = avg_counts+1) %>% spread(key = treatment, value = avg_counts)
D1 <- DX %>%
inner_join(D0, by = c("level" = "level", "new_taxa" = "new_taxa", "timepoint"="timepoint")) %>%
mutate(p.value = -log10(p.value)) %>%
gather(key = "treatment", value = "counts", -c(level,new_taxa,timepoint, p.value))
D1$level <- factor(D1$level, levels = c("genus")) #, "species"
D1 <- D1 %>% group_by(level) %>% mutate(tot = sum(counts), relab = counts/tot)
p <- ggplot(D1, aes(x = treatment, y = new_taxa))
p <- p + geom_tile(aes(fill = relab), colour = "white")
p <- p + theme(legend.position="bottom")
p <- p + facet_grid(level~timepoint, scales = "free",  space = "free")
p <- p + xlab("Treatments") + ylab("Taxa")
p <- p + scale_fill_gradient(low = "orange", high = "blue")
p <- p + theme(strip.text.y = element_text(size = 5),
strip.text.x = element_text(size = 6),
# axis.text.y = element_text(size = 4),
axis.text.x = element_text(size = 6),
axis.title = element_text(size = 6))
p <- p + guides(fill="none") + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
p
dd <- D1 %>% mutate(variable = "p-value")
q <- ggplot(dd, aes(x = factor(1), y = new_taxa, group=level))
q <- q + geom_tile(aes(fill = p.value), colour = "white")
q <- q + theme(legend.position="bottom")
q <- q + facet_grid(level~variable, space="free", scales = "free_y")
q <- q + scale_fill_gradient(low = "orange", high = "blue")
q <- q + xlab("Treatments") + ylab("Taxa")
q <- q + theme(strip.text = element_text(size = 4),
strip.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title = element_text(size = 6))
q <- q + guides(fill=FALSE) + theme(
# axis.title.x = element_blank(),
# axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
strip.text.y = element_blank(),
# axis.text.x = element_blank()
axis.text.x = element_text(size = 6)
)
q <- q + xlab("")
q
#ggsave(filename = "~/Results/stoolS/results/taxonomy_heatmap_pvalue_stools.png", plot = q, device = "png", width = 6, height = 6)
figure_final <- ggarrange(q, p, widths=c(0.1, 0.1), labels=c("A", "B"), legend = "bottom", common.legend = TRUE)
print(figure_final)
ggsave(filename = "~/Results/STOOLS/results/taxonomy_heatmap_stools.png", plot = figure_final, device = "png", width = 7, height = 10)
res = data.frame("level"=NULL, "OTU"=NULL, "p_value"=NULL, "Control"=NULL,"Treated"=NULL)
DX <- DX %>% filter(level == "genus")
m1 <- m1 %>% filter(level=="genus")
# DX$new_taxa <- paste(DX$new_taxa,", Timepoint:", DX$timepoint)
# m1$new_taxa <- paste(m1$new_taxa,", Timepoint:", m1$timepoint)
for (name in DX$new_taxa) {
print(paste("analysing OTU ", name))
pval = as.numeric(DX[DX$new_taxa==name,"p.value"])
level = DX[DX$new_taxa==name,"level"]
tpoint = DX[DX$new_taxa==name, "timepoint"]
## estimating coefficients
temp2 = filter(m1, new_taxa == name)
temp2$treatment <- factor(temp2$treatment, levels = c("control","EO"))
g = lm(counts ~ treatment, data = temp2)
## extracting coefficients
coefs = g$coefficients
coefs = coefs[!grepl("(Intercept)", names(coefs))]
names(coefs) = gsub("treatment","",names(coefs))
coefs = as.data.frame(t(coefs))
## adding metadata
coefs["level"] = level
coefs["OTU"] = name
coefs["p_value"] = pval
coefs["timepoint"] = tpoint
# saving results
res = rbind.data.frame(res, coefs)
}
write.csv(res, "~/Results/STOOLS/results/taxonomy_resT2.csv")
View(DX)
View(D)
library("DT")
library("knitr")
library("tidyr")
library("broom")
library("vegan")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("tidyverse")
library("data.table")
library("ggrepel")
library("tibble")
library("dplyr")
library("cowplot")
metadata <- fread("/home/mycelium/Results/STOOLS/mapping_milkqua_stools.csv")
metadata$sample <- paste0("sample-", metadata$MISEQ_ID)
metadata <- metadata[,c(7,8,10)]
metadata %>%
group_by(timepoint,treatment) %>%
dplyr::summarise(N=n())
metadata <- metadata[metadata$timepoint == "2"] #REMEMBER TO SWITCH THIS NUMBER BETWEEN 2 AND 3 TO GET SEPARATED IMAGES
otu <- fread("/home/mycelium/Results/STOOLS/results/otu_norm_CSS.csv", header = TRUE, sep = ",")
otu <- filter(otu, Family !="Mitochondria")
otu <- filter(otu, Class !="Chloroplast")
otu_tax =select(otu, -1, -34:-40)
otu_tax <- otu_tax/colSums(otu_tax)
otu_genus <- cbind(otu_tax, otu$Genus)
colnames(otu_genus)[33]<- "genera"
otu_genus <- otu_genus %>% group_by(genera) %>% summarise_all(funs(sum))
uncult <- slice(otu_genus, 1, 230:238)
uncult$genera <- "Uncultured or unknown"
uncult <- uncult %>%
group_by(genera) %>%
summarise(across(everything(), sum))
otu_genus <- otu_genus[-c(1, 230:238), ]
otu_genus <- rbind(otu_genus, uncult)
otu_genus <- as.data.frame(t(otu_genus))
colnames(otu_genus) <- otu_genus[1,]
otu_genus <- otu_genus[-c(1),]
#otu_genus <- cbind(otu_genus, treatment=metadata$treatment, timepoint=metadata$timepoint, sample=metadata$sample)
metadata_cols = names(metadata)
metadata_cols = names(metadata)
otu_genus$sample = row.names(otu_genus)
otu_genus <- otu_genus %>% inner_join(select(metadata, all_of(metadata_cols)), by="sample")
mO <- reshape2::melt(otu_genus,id.vars = metadata_cols, value.name = "counts", variable.name = "genus")
mO <- mO %>%
arrange(treatment)
ordered_samples <- metadata %>%
arrange(metadata$treatment) %>%
dplyr::select(treatment,sample)
mO$sample <- factor(mO$sample, levels = ordered_samples$sample)
mO$counts <- as.numeric(mO$counts)
mO$treatment <- factor(mO$treatment)
D <- mO %>%
group_by(genus) %>%
summarise(N=n(), avg_abund = round(mean(counts),4), std = round(sd(counts),3)) %>%
# filter(avg_abund>0.005) %>%
arrange(genus,avg_abund)
genus <- D %>%
group_by(genus) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
dplyr::select(genus,s)
D$genus <- factor(D$genus, levels = rev(genus$genus[order(genus$s)]))
D <- D %>%
arrange(genus)
kable(D)
#write.csv(D, "~/Results/STOOLS/results/taxonomy_core_microbiota.csv", sep = ",")
## here above is where filter of "Ohter is added"
# oldc <- D$genus[D$avg_abund < 0.02]
# newc <- rep("Other", length(oldc))
# vec <- newc[match(D$genus,oldc)]
# D$genus <- ifelse(D$genus %in% oldc, "Other", as.character(D$genus))
genus <- D %>%
group_by(genus) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
dplyr::select(genus,s)
D$genus <- factor(D$genus, levels = rev(genus$genus[order(genus$s)]))
D <- D %>%
arrange(genus)
#kable(D)
D1 <- aggregate(cbind(D$avg_abund, D$std) ~ genus, data=D, FUN = sum)
names(D1)[2] <- "avg_abund"
names(D1)[3] <- "std"
kable(D1)
#D1$genus <- paste(D1$genus,"","(",D1$avg_abund*100,"%",")")
pgeneratot <- ggplot(D1, aes(x=factor(1), y=avg_abund, fill=genus)) + geom_bar(width=1,stat="identity")
#pgenustot <- pgeneratot + facet_grid(N~treatment)
pgeneratot <- pgeneratot + coord_polar(theta='y') #activate this if you want a piechart
#pgeneratot <- pgeneratot + scale_fill_brewer(palette = "Set1")
#pgeneratot <- pgeneratot + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.4), size=3, show.legend = F, force = 0.6,  max.overlaps = 10)
pgeneratot <- pgeneratot + guides(fill = guide_legend(title = "Genera"))
my_palette = get_palette(c("green3","yellow","blue","magenta","cyan","red","purple","brown", "darkorange1","pink1","darkorchid1", "seagreen2"), length(unique(D1$genus)))
pgeneratot <- pgeneratot + guides(fill = guide_legend(title = "genera"))
pgeneratot <- pgeneratot + xlab("Relative abundances") + ylab("Percentages") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) + scale_fill_manual(values = my_palette)
pgeneratot <- pgeneratot + theme(text = element_text(size=10),
axis.text.x = element_blank(),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
legend.position="bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(pgeneratot)
ggsave(pgeneratot, height = 15, width = 15, filename ="~/Results/STOOLS/results/core_genera_stools.png")
#
# D %>% group_by(genus) %>% summarise(treatment=n())
otu_genus$sample = row.names(otu_genus)
otu_genus <- otu_genus %>% inner_join(select(metadata, all_of(metadata_cols)), by="sample")
m1 <- reshape2::melt(otu_genus,id.vars = metadata_cols, value.name = "counts", variable.name = "genus")
otu_genus$sample = row.names(otu_genus)
otu_genus <- otu_genus %>% inner_join(select(metadata, all_of(metadata_cols)), by="sample")
m1 <- reshape2::melt(otu_genus,id.vars = metadata_cols, value.name = "counts", variable.name = "genus")
m1 <- m1 %>%
arrange(treatment)
ordered_samples <- metadata %>%
arrange(metadata$treatment) %>%
dplyr::select(treatment,sample)
m1$sample <- factor(m1$sample, levels = ordered_samples$sample)
m1$counts <- as.numeric(m1$counts)
m1$treatment <- factor(m1$treatment)
D <- m1 %>%
group_by(genus, treatment, timepoint) %>%
summarise(N=n(), avg_abund = round(mean(counts),4), std = round(sd(counts),3)) %>%
#  filter(avg_abund>0.05) %>%
# filter(timepoint==2) %>%
arrange(genus,avg_abund)
# oldc <- D$genus[D$avg_abund < 0.01]
# newc <- rep("Other", length(oldc))
# vec <- newc[match(D$genus,oldc)]
# D$genus <- ifelse(D$genus %in% oldc, "Other", as.character(D$genus))
genus <- D %>%
group_by(genus) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
dplyr::select(genus,s)
D$genus <- factor(D$genus, levels = rev(genus$genus[order(genus$s)]))
D <- D %>%
arrange(genus)
kable(D)
library("DT")
library("knitr")
library("tidyr")
library("broom")
library("vegan")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("tidyverse")
library("data.table")
library("ggrepel")
library("tibble")
library("dplyr")
library("cowplot")
metadata <- fread("/home/mycelium/Results/STOOLS/mapping_milkqua_stools.csv")
metadata$sample <- paste0("sample-", metadata$MISEQ_ID)
metadata <- metadata[,c(7,8,10)]
metadata %>%
group_by(timepoint,treatment) %>%
dplyr::summarise(N=n())
metadata <- metadata[metadata$timepoint == "2"] #REMEMBER TO SWITCH THIS NUMBER BETWEEN 2 AND 3 TO GET SEPARATED IMAGES
otu <- fread("/home/mycelium/Results/STOOLS/results/otu_norm_CSS.csv", header = TRUE, sep = ",")
otu <- filter(otu, Family !="Mitochondria")
otu <- filter(otu, Class !="Chloroplast")
otu_tax =select(otu, -1, -34:-40)
otu_tax <- otu_tax/colSums(otu_tax)
otu_genus <- cbind(otu_tax, otu$Genus)
colnames(otu_genus)[33]<- "genera"
otu_genus <- otu_genus %>% group_by(genera) %>% summarise_all(funs(sum))
uncult <- slice(otu_genus, 1, 230:238)
uncult$genera <- "Uncultured or unknown"
uncult <- uncult %>%
group_by(genera) %>%
summarise(across(everything(), sum))
otu_genus <- otu_genus[-c(1, 230:238), ]
otu_genus <- rbind(otu_genus, uncult)
otu_genus <- as.data.frame(t(otu_genus))
colnames(otu_genus) <- otu_genus[1,]
otu_genus <- otu_genus[-c(1),]
#otu_genus <- cbind(otu_genus, treatment=metadata$treatment, timepoint=metadata$timepoint, sample=metadata$sample)
metadata_cols = names(metadata)
metadata_cols = names(metadata)
otu_genus$sample = row.names(otu_genus)
otu_genus <- otu_genus %>% inner_join(select(metadata, all_of(metadata_cols)), by="sample")
mO <- reshape2::melt(otu_genus,id.vars = metadata_cols, value.name = "counts", variable.name = "genus")
mO <- mO %>%
arrange(treatment)
ordered_samples <- metadata %>%
arrange(metadata$treatment) %>%
dplyr::select(treatment,sample)
mO$sample <- factor(mO$sample, levels = ordered_samples$sample)
mO$counts <- as.numeric(mO$counts)
mO$treatment <- factor(mO$treatment)
D <- mO %>%
group_by(genus) %>%
summarise(N=n(), avg_abund = round(mean(counts),4), std = round(sd(counts),3)) %>%
# filter(avg_abund>0.005) %>%
arrange(genus,avg_abund)
genus <- D %>%
group_by(genus) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
dplyr::select(genus,s)
D$genus <- factor(D$genus, levels = rev(genus$genus[order(genus$s)]))
D <- D %>%
arrange(genus)
kable(D)
#write.csv(D, "~/Results/STOOLS/results/taxonomy_core_microbiota.csv", sep = ",")
## here above is where filter of "Ohter is added"
# oldc <- D$genus[D$avg_abund < 0.02]
# newc <- rep("Other", length(oldc))
# vec <- newc[match(D$genus,oldc)]
# D$genus <- ifelse(D$genus %in% oldc, "Other", as.character(D$genus))
genus <- D %>%
group_by(genus) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
dplyr::select(genus,s)
D$genus <- factor(D$genus, levels = rev(genus$genus[order(genus$s)]))
D <- D %>%
arrange(genus)
#kable(D)
D1 <- aggregate(cbind(D$avg_abund, D$std) ~ genus, data=D, FUN = sum)
names(D1)[2] <- "avg_abund"
names(D1)[3] <- "std"
kable(D1)
#D1$genus <- paste(D1$genus,"","(",D1$avg_abund*100,"%",")")
pgeneratot <- ggplot(D1, aes(x=factor(1), y=avg_abund, fill=genus)) + geom_bar(width=1,stat="identity")
#pgenustot <- pgeneratot + facet_grid(N~treatment)
pgeneratot <- pgeneratot + coord_polar(theta='y') #activate this if you want a piechart
#pgeneratot <- pgeneratot + scale_fill_brewer(palette = "Set1")
#pgeneratot <- pgeneratot + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.4), size=3, show.legend = F, force = 0.6,  max.overlaps = 10)
pgeneratot <- pgeneratot + guides(fill = guide_legend(title = "Genera"))
my_palette = get_palette(c("green3","yellow","blue","magenta","cyan","red","purple","brown", "darkorange1","pink1","darkorchid1", "seagreen2"), length(unique(D1$genus)))
pgeneratot <- pgeneratot + guides(fill = guide_legend(title = "genera"))
pgeneratot <- pgeneratot + xlab("Relative abundances") + ylab("Percentages") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) + scale_fill_manual(values = my_palette)
pgeneratot <- pgeneratot + theme(text = element_text(size=10),
axis.text.x = element_blank(),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
legend.position="bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(pgeneratot)
ggsave(pgeneratot, height = 15, width = 15, filename ="~/Results/STOOLS/results/core_genera_stools.png")
#
# D %>% group_by(genus) %>% summarise(treatment=n())
otu_genus$sample = row.names(otu_genus)
otu_genus <- otu_genus %>% inner_join(select(metadata, all_of(metadata_cols)), by="sample")
m1 <- reshape2::melt(otu_genus,id.vars = metadata_cols, value.name = "counts", variable.name = "genus")
library("DT")
library("knitr")
library("tidyr")
library("broom")
library("vegan")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("tidyverse")
library("data.table")
library("ggrepel")
library("tibble")
library("dplyr")
library("cowplot")
metadata <- fread("/home/mycelium/Results/STOOLS/mapping_milkqua_stools.csv")
metadata$sample <- paste0("sample-", metadata$MISEQ_ID)
metadata <- metadata[,c(7,8,10)]
metadata %>%
group_by(timepoint,treatment) %>%
dplyr::summarise(N=n())
metadata <- metadata[metadata$timepoint == "2"] #REMEMBER TO SWITCH THIS NUMBER BETWEEN 2 AND 3 TO GET SEPARATED IMAGES
otu <- fread("/home/mycelium/Results/STOOLS/results/otu_norm_CSS.csv", header = TRUE, sep = ",")
otu <- filter(otu, Family !="Mitochondria")
otu <- filter(otu, Class !="Chloroplast")
otu_tax =select(otu, -1, -34:-40)
otu_tax <- otu_tax/colSums(otu_tax)
otu_genus <- cbind(otu_tax, otu$Genus)
colnames(otu_genus)[33]<- "genera"
otu_genus <- otu_genus %>% group_by(genera) %>% summarise_all(funs(sum))
uncult <- slice(otu_genus, 1, 230:238)
uncult$genera <- "Uncultured or unknown"
uncult <- uncult %>%
group_by(genera) %>%
summarise(across(everything(), sum))
otu_genus <- otu_genus[-c(1, 230:238), ]
otu_genus <- rbind(otu_genus, uncult)
otu_genus <- as.data.frame(t(otu_genus))
colnames(otu_genus) <- otu_genus[1,]
otu_genus <- otu_genus[-c(1),]
#otu_genus <- cbind(otu_genus, treatment=metadata$treatment, timepoint=metadata$timepoint, sample=metadata$sample)
metadata_cols = names(metadata)
metadata_cols = names(metadata)
otu_genus$sample = row.names(otu_genus)
otu_genus <- otu_genus %>% inner_join(select(metadata, all_of(metadata_cols)), by="sample")
mO <- reshape2::melt(otu_genus,id.vars = metadata_cols, value.name = "counts", variable.name = "genus")
mO <- mO %>%
arrange(treatment)
ordered_samples <- metadata %>%
arrange(metadata$treatment) %>%
dplyr::select(treatment,sample)
mO$sample <- factor(mO$sample, levels = ordered_samples$sample)
mO$counts <- as.numeric(mO$counts)
mO$treatment <- factor(mO$treatment)
D <- mO %>%
group_by(genus) %>%
summarise(N=n(), avg_abund = round(mean(counts),4), std = round(sd(counts),3)) %>%
# filter(avg_abund>0.005) %>%
arrange(genus,avg_abund)
genus <- D %>%
group_by(genus) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
dplyr::select(genus,s)
D$genus <- factor(D$genus, levels = rev(genus$genus[order(genus$s)]))
D <- D %>%
arrange(genus)
kable(D)
#write.csv(D, "~/Results/STOOLS/results/taxonomy_core_microbiota.csv", sep = ",")
## here above is where filter of "Ohter is added"
# oldc <- D$genus[D$avg_abund < 0.02]
# newc <- rep("Other", length(oldc))
# vec <- newc[match(D$genus,oldc)]
# D$genus <- ifelse(D$genus %in% oldc, "Other", as.character(D$genus))
genus <- D %>%
group_by(genus) %>%
summarize("s"=sum(avg_abund)) %>%
arrange(desc(s)) %>%
dplyr::select(genus,s)
D$genus <- factor(D$genus, levels = rev(genus$genus[order(genus$s)]))
D <- D %>%
arrange(genus)
#kable(D)
D1 <- aggregate(cbind(D$avg_abund, D$std) ~ genus, data=D, FUN = sum)
names(D1)[2] <- "avg_abund"
names(D1)[3] <- "std"
kable(D1)
#D1$genus <- paste(D1$genus,"","(",D1$avg_abund*100,"%",")")
pgeneratot <- ggplot(D1, aes(x=factor(1), y=avg_abund, fill=genus)) + geom_bar(width=1,stat="identity")
#pgenustot <- pgeneratot + facet_grid(N~treatment)
pgeneratot <- pgeneratot + coord_polar(theta='y') #activate this if you want a piechart
#pgeneratot <- pgeneratot + scale_fill_brewer(palette = "Set1")
#pgeneratot <- pgeneratot + geom_label_repel(aes(label = paste0(avg_abund*100, "%")), position=position_stack (vjust=0.4), size=3, show.legend = F, force = 0.6,  max.overlaps = 10)
pgeneratot <- pgeneratot + guides(fill = guide_legend(title = "Genera"))
my_palette = get_palette(c("green3","yellow","blue","magenta","cyan","red","purple","brown", "darkorange1","pink1","darkorchid1", "seagreen2"), length(unique(D1$genus)))
pgeneratot <- pgeneratot + guides(fill = guide_legend(title = "genera"))
pgeneratot <- pgeneratot + xlab("Relative abundances") + ylab("Percentages") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) + scale_fill_manual(values = my_palette)
pgeneratot <- pgeneratot + theme(text = element_text(size=10),
axis.text.x = element_blank(),
# axis.text.y = element_text(size=4),
strip.text = element_text(size = 8),
legend.position="bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.text=element_text(size=10),
legend.title=element_text(size=10))
print(pgeneratot)
ggsave(pgeneratot, height = 15, width = 15, filename ="~/Results/STOOLS/results/core_genera_stools.png")
#
# D %>% group_by(genus) %>% summarise(treatment=n())
otu_genus$sample = row.names(otu_genus)
otu_genus <- otu_genus %>% inner_join(select(metadata, all_of(metadata_cols)), by="sample")
m1 <- reshape2::melt(otu_genus,id.vars = metadata_cols, value.name = "counts", variable.name = "genus")
View(otu_genus)
View(genus)
View(otu)
View(metadata)
View(otu_tax)
