## PARAMETERS
HOME <- Sys.getenv("HOME")
prj_folder = file.path(HOME, "Results")
analysis_folder = "Milkqua_skinswab_bootstrapping"
fname = "otu_table_filtered10_2.biom"
conf_file = "mapping_milkqua_skinswabs.csv"
min_tot_counts = 500 ## minimum number of total counts per sample to be included in the analysis
outdir = file.path(analysis_folder)
repo = file.path(HOME, "milkqua_microbiome")
# source(file.path(prj_folder, repo, "r_scripts/dist2list.R")) ## from: https://github.com/vmikk/metagMisc/
# source(file.path(prj_folder, repo, "r_scripts/phyloseq_transform.R")) ## from: https://github.com/vmikk/metagMisc/
source(file.path(repo, "r_scripts/support_functions/dist2list.R")) ## from: https://github.com/vmikk/metagMisc/
source(file.path(repo, "r_scripts/support_functions/phyloseq_transform.R")) ## from: https://github.com/vmikk/metagMisc/
writeLines(" - reading the filtered (OTU-wise) biom file into phyloseq")
## both the OTU table and the taxonomic classification are available from the biom file (qiime 1.9)
biom_otu_tax <- phyloseq::import_biom(BIOMfilename = file.path(prj_folder,analysis_folder,fname))
writeLines(" - removing samples with too few total counts")
biom_otu_tax = prune_samples(sample_sums(biom_otu_tax)>=min_tot_counts, biom_otu_tax)
otu = otu_table(biom_otu_tax, taxa_are_rows = TRUE)
taxa = tax_table(biom_otu_tax)
print(paste("N. of OTUs read from biom file is:", nrow(otu)))
print(paste("N .of samples retained after filtering is:", ncol(otu)))
colnames(otu) <- paste("sample-",colnames(otu),sep="")
print(head(otu))
writeLines(" - change the names of taxonomic levels to Kngdom, Class etc.")
colnames(taxa) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species") #if number does not fit, add "" as blank spaces to solve the problem
print(head(taxa))
## metadata
writeLines(" - reading the metadata")
metadata = fread(file.path(prj_folder, analysis_folder,conf_file))
names(metadata)[1] <- "sample-id"
if(is.numeric(metadata$`sample-id`)) metadata$`sample-id` = paste("sample",metadata$`sample-id`,sep="-") # in case your sample-id are not only numeric, remove or comment if(is.numeric(metadata$`sample-id`))
metadata <- as.data.frame(metadata)
row.names(metadata) <- metadata$`sample-id`
metadata$`sample-id` <- NULL
## read into phyloseq
writeLines(" - add metadata to the phyloseq object")
samples = sample_data(metadata)
otu_tax_sample = phyloseq(otu,taxa,samples)
sample_data(otu_tax_sample)
## making results folder
if(!file.exists(file.path(prj_folder, analysis_folder, "results"))) dir.create(file.path(prj_folder, analysis_folder, "results"), showWarnings = FALSE)
## making figures folder
if(!file.exists(file.path(prj_folder, analysis_folder, "results", "figures"))) dir.create(file.path(prj_folder, analysis_folder, "results", "figures"), showWarnings = FALSE)
## Alpha diversity
## alpha diversity is calculated on the original count data, not normalised
## (see https://www.bioconductor.org/packages/devel/bioc/vignettes/phyloseq/inst/doc/phyloseq-FAQ.html#should-i-normalize-my-data-before-alpha-diversity-analysis)
## (see https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003531)
writeLines(" - calculate alpha diversity indices")
alpha = estimate_richness(otu_tax_sample, split = TRUE)
alpha$"sample-id" = row.names(alpha)
alpha = relocate(alpha, `sample-id`)
fwrite(x = alpha, file = file.path(prj_folder, analysis_folder, "results", "alpha.csv"))
p <- plot_richness(otu_tax_sample, x="treatment", color="timepoint")
ggsave(filename = file.path(prj_folder, analysis_folder, "results","figures", "alpha_plot.png"), plot = p, device = "png", width = 11, height = 7)
## Preprocessing: e.g. filtering
## making normalization folder
if(!file.exists(file.path(prj_folder, outdir))) dir.create(file.path(prj_folder, outdir), showWarnings = FALSE)
writeLines(" - CSS normalization")
otu_tax_sample_norm = phyloseq_transform_css(otu_tax_sample, norm = TRUE, log = FALSE)
## add taxonomy to normalised counts
otu_css_norm = base::as.data.frame(otu_table(otu_tax_sample_norm))
otu_css_norm$tax_id = row.names(otu_css_norm)
otu_css_norm <- relocate(otu_css_norm, tax_id)
taxonomy = as.data.frame(tax_table(otu_tax_sample_norm))
taxonomy$tax_id = row.names(taxonomy)
taxonomy <- relocate(taxonomy, tax_id)
otu_css_norm = otu_css_norm %>% inner_join(taxonomy, by = "tax_id")
writeLines(" - writing out the CSS normalized OTU table")
fwrite(x = otu_css_norm, file = file.path(prj_folder, outdir, "results", "otu_norm_CSS.csv"))
## relative abundances
otu_relative = transform_sample_counts(otu_tax_sample, function(x) x/sum(x) )
otu_rel_filtered = filter_taxa(otu_relative, function(x) mean(x) > 5e-3, TRUE)
nrow(otu_table(otu_rel_filtered))
writeLines(" - additionas plots")
random_tree = rtree(ntaxa((otu_rel_filtered)), rooted=TRUE, tip.label=taxa_names(otu_rel_filtered))
plot(random_tree)
biom1 = merge_phyloseq(otu_rel_filtered, random_tree)
plot_tree(biom1, color="treatment", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
plot_tree(biom1, color="Genus", shape="treatment", size="abundance")
###############
## distances ##
###############
writeLines(" - beta diversity: distance matrices")
writeLines(" - available distance metrics")
dist_methods <- unlist(distanceMethodList)
print(dist_methods)
## bray-curtis
writeLines(" - calculate Bray-Curtis distances")
distances = distance(otu_tax_sample_norm, method="bray", type = "samples")
iMDS  <- ordinate(otu_tax_sample_norm, "MDS", distance=distances)
p <- plot_ordination(otu_tax_sample_norm, iMDS, color="treatment", shape="timepoint")
ggsave(filename = file.path(prj_folder, analysis_folder, "results", "figures","mds_plot_bray_curtis.png"), plot = p, device = "png")
writeLines(" - write out distance matrix")
dd = dist2list(distances, tri = FALSE)
dx = spread(dd, key = "col", value = "value")
fwrite(x = dx, file = file.path(prj_folder, analysis_folder, "results", "bray_curtis_distances.csv"))
## euclidean
writeLines(" - calculate Euclidean distances")
distances = distance(otu_tax_sample_norm, method="euclidean", type = "samples")
iMDS  <- ordinate(otu_tax_sample_norm, "MDS", distance=distances)
p <- plot_ordination(otu_tax_sample_norm, iMDS, color="treatment", shape="timepoint")
ggsave(filename = file.path(prj_folder, analysis_folder, "results","figures", "mds_plot_euclidean.png"), plot = p, device = "png")
writeLines(" - write out euclidean distance matrix")
dd = dist2list(distances, tri = FALSE)
dx = spread(dd, key = "col", value = "value")
fwrite(x = dx, file = file.path(prj_folder, analysis_folder, "results", "euclidean_distances.csv"))
### add tree ###
random_tree = rtree(ntaxa((otu_tax_sample_norm)), rooted=TRUE, tip.label=taxa_names(otu_tax_sample_norm))
otu_norm_tree = merge_phyloseq(otu_tax_sample_norm, random_tree)
# plot_tree(otu_norm_tree, color="treatment", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
plot_tree(otu_norm_tree, color="Phylum", shape="treatment", size="abundance")
## unifrac
writeLines(" - calculate Unifrac distances")
distances = distance(otu_norm_tree, method="unifrac", type = "samples")
iMDS  <- ordinate(otu_norm_tree, "MDS", distance=distances)
p <- plot_ordination(biom1, iMDS, color="treatment", shape="timepoint")
ggsave(filename = file.path(prj_folder, analysis_folder, "results", "figures", "figures","mds_plot_unifrac.png"), plot = p, device = "png")
## weighted unifrac
writeLines(" - calculate weighted Unifrac distances")
distances = distance(otu_norm_tree, method="wunifrac", type = "samples")
iMDS  <- ordinate(otu_norm_tree, "MDS", distance=distances)
p <- plot_ordination(biom1, iMDS, color="treatment", shape="timepoint")
ggsave(filename = file.path(prj_folder, analysis_folder, "results", "figures","mds_plot_weighted_unifrac.png"), plot = p, device = "png")
writeLines(" - write out weighted Unifrac distance matrix")
dd = dist2list(distances, tri = FALSE)
dx = spread(dd, key = "col", value = "value")
fwrite(x = dx, file = file.path(prj_folder, analysis_folder, "results", "weighted_unifrac_distances.csv"))
library("DT")
library("knitr")
library("dplyr")
library("tidyr")
library("broom")
library("vegan")
library("scales")
library("ggplot2")
library("ggpubr")
# library("madbito")
library("reshape2")
library("gghighlight")
library("data.table")
library("rmarkdown")
library("ggrepel")
library("ggplot2")
metadata <- fread("/home/mycelium/Results/Milkqua_milk_invivopublication/mapping_milkqua_milk.csv")
names(metadata)[1] <- "sample"
metadata$Cow_ID <- paste(metadata$cow, metadata$ref)
metadata$timepoint[metadata$timepoint == "0"] <- "T0"
metadata$timepoint[metadata$timepoint == "8"] <- "T1"
metadata$timepoint[metadata$timepoint == "21"] <- "T2"
metadata$timepoint[metadata$timepoint == "28"] <- "T3"
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha_diversity/alpha.txt", header = TRUE)
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.txt", header = TRUE)
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE)
alpha$sample <- row.names(alpha)
alpha$observed_species <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
mAlpha$type <- metadata$sample_type[match(mAlpha$sample,metadata$sample)]
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$sample,metadata$sample)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$sample,metadata$sample)]
View(mAlpha)
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE, sep = ",")
View(alpha)
alpha$sample <- row.names(alpha)
alpha$observed_species <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
View(alpha)
View(metadata)
library("DT")
library("knitr")
library("dplyr")
library("tidyr")
library("broom")
library("vegan")
library("scales")
library("ggplot2")
library("ggpubr")
# library("madbito")
library("reshape2")
library("gghighlight")
library("data.table")
library("rmarkdown")
library("ggrepel")
library("ggplot2")
metadata <- fread("/home/mycelium/Results/Milkqua_milk_invivopublication/mapping_milkqua_milk.csv")
names(metadata)[1] <- "sample"
View(metadata)
metadata$Cow_ID <- paste(metadata$cow, metadata$ref)
metadata$timepoint[metadata$timepoint == "0"] <- "T0"
metadata$timepoint[metadata$timepoint == "8"] <- "T1"
metadata$timepoint[metadata$timepoint == "21"] <- "T2"
metadata$timepoint[metadata$timepoint == "28"] <- "T3"
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE, sep = ",")
alpha$sample <- row.names(alpha)
alpha$observed_species <- NULL
View(alpha)
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE, sep = ",")
alpha$sample <- metadata$sample
#alpha$sample <- row.names(alpha)
alpha$sample <- alpha$sample.id
alpha$observed_species <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
mAlpha$type <- metadata$sample_type[match(mAlpha$sample,metadata$sample)]
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$sample,metadata$sample)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$sample,metadata$sample)]
View(mAlpha)
mAlpha <- filter(mAlpha, type == "milk") %>% select(-c(type))
View(metadata)
View(alpha)
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE, sep = ",")
#alpha$sample <- row.names(alpha)
alpha$sample <-  gsub("sample.","", as.character(alpha$sample.id))
alpha$observed_species <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
mAlpha$type <- metadata$sample_type[match(mAlpha$sample,metadata$sample)]
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$sample,metadata$sample)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$sample,metadata$sample)]
mAlpha <- filter(mAlpha, type == "milk") %>% select(-c(type))
View(alpha)
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE, sep = ",")
#alpha$sample <- row.names(alpha)
alpha$sample <-  gsub("sample.","", as.character(alpha$sample.id))
alpha$observed_species <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
View(alpha)
l
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE, sep = ",")
#alpha$sample <- row.names(alpha)
alpha$sample <-  gsub("sample.","", as.character(alpha$sample.id))
alpha$sample.id <- NULL
alpha$observed_species <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
mAlpha$type <- metadata$sample_type[match(mAlpha$sample,metadata$sample)]
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$sample,metadata$sample)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$sample,metadata$sample)]
mAlpha <- filter(mAlpha, type == "milk") %>% select(-c(type))
mAlpha$timepoint <- factor(mAlpha$timepoint, levels = c("T0","T1","T2","T3"))
D <- mAlpha %>%
group_by(metric,treatment, timepoint) %>%
summarize(N=n(),avg=round(mean(value),3)) %>%
spread(key = metric, value = avg)
D$timepoint <- factor(D$timepoint, levels = c("T0","T1","T2","T3"))
d_alpha <- D %>%
gather(key = "metric", value = "value", -c(treatment,timepoint,N)) %>%
spread(key = "treatment", value = "value")
kable(D)
mAlpha <- mAlpha %>% group_by(metric) %>%
mutate(scaled_value = rescale(value, to = c(0,100)))
p <- ggplot(mAlpha, aes(x=timepoint,y=scaled_value))
p <- p + geom_boxplot(aes(fill=treatment))
p <- p + scale_fill_manual(values=c("#56B4E9", "#E69F00"))
p <- p + facet_wrap(~metric, scales = "free")
p <- p + xlab("sample_type")
p = p + theme(strip.text = element_text(size = 12),
axis.text.x = element_text(size = 8))
p
D <- mAlpha %>%
group_by(metric, timepoint) %>%
do(tidy(lm(value ~ treatment, data = .))) %>%
filter(term != "(Intercept)")
datatable(D, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
p <- ggplot(data = D, mapping= aes(x=timepoint, y=p.value))
p <- p + geom_point(aes(color = metric, stroke = 1), position=position_jitter(h=0, w=0.25))
p <- p + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
p <- p + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5)
p <- p + scale_y_continuous(breaks=pretty_breaks(n=20))
p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
p <- p + coord_trans(y="log2")
p
#ggsave(filename = "alpha_significance_tablewithdots_MILK.png", width = 8, height = 8, plot = p, device = "png")
## Correction for baseline
bl_medie <- mAlpha %>%
filter(timepoint=="T0") %>%
group_by(metric,treatment) %>%
summarize(media_bl=mean(value))
bl_counts <- mAlpha %>%
group_by(metric,treatment) %>%
filter(timepoint=="T0") %>%
arrange(metric) %>%
rename(value.bl = value)
M <- merge(mAlpha,bl_counts[,c(1,2,3)],by=c("metric","sample"),all.x = TRUE)
M1 <- M%>%
filter(!is.na(M$value.bl))
M2 <- M %>%
filter(is.na(value.bl)) %>%
mutate(value.bl=replace(value.bl,is.na(value.bl),right_join(bl_medie, ., by =c("metric","treatment"))$media_bl))
M <- rbind.data.frame(M1,M2)
M <- M %>%
mutate(corrected_counts=value-value.bl) %>%
filter(value!=0) %>%
arrange(sample)
M <- M %>%
group_by(metric) %>%
mutate(scaled_counts=scales::rescale(corrected_counts,c(0,100)))
D <- M %>%
group_by(metric,treatment,timepoint) %>%
summarize(avg=mean(corrected_counts)) %>%
spread(key = metric, value = avg)
kable(D)
mD <- melt(D, id.vars = c("timepoint","treatment"), variable.name = "metric")
p <- ggplot(mD, aes(x=timepoint,y=value, group=treatment)) + geom_point(aes(colour=treatment))
p <- p + geom_line(aes(colour=treatment))
p <- p + facet_wrap(~metric, scales = "free_y")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
TP <- M %>%
filter(timepoint != "T0") %>%
group_by(metric, timepoint) %>%
do(tidy(lm(corrected_counts ~ treatment, data = .))) %>%
filter(term != "(Intercept)")
datatable(TP, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
p <- ggplot(data = TP, mapping= aes(x=timepoint, y=p.value))
p <- p + geom_point(aes(color = metric, stroke = 1), position=position_jitter(h=0, w=0.27))
p <- p + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
p <- p + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
p <- p + coord_trans(y="log2")
p <- p + scale_y_continuous(breaks=pretty_breaks(n=20)) + scale_y_continuous(breaks = c(0, 0.05, 0.10, 1))+  theme(axis.text.x = element_text(angle=90))
p
#ggsave(filename = "alpha_significance_tablewithdots_correctedforbaseline_MILK.png", width = 8, height = 8, plot = p, device = "png")
TR <- M %>%
filter(timepoint != "T0") %>%
group_by(metric, treatment) %>%
do(tidy(lm(corrected_counts ~ timepoint, data = .))) %>%
filter(term != "(Intercept)")
datatable(TR, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
q <- ggplot(data = TR, mapping= aes(x=treatment, y=p.value))
q <- q + geom_point(aes(color = metric, stroke = 1, shape = term), position=position_jitter(h=0, w=0.27))
q <- q + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
q <- q + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
q <- q + coord_trans(y="log2")
q <- q + scale_y_continuous(breaks=pretty_breaks(n=20)) + scale_y_continuous(breaks = c(0, 0.05, 0.10, 1))+  theme(axis.text.x = element_text(angle=90))
q
#ggsave(filename = "alpha_significance_tablewithdots_correctedforbaseline_MILK.png", width = 8, height = 8, plot = p, device = "png")
MM <- M %>%
filter(timepoint != 0) %>%
group_by(metric) %>%
do(tidy(lm(corrected_counts ~ timepoint+treatment, data = .))) %>%
filter(term != "(Intercept)")
datatable(MM, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
r <- ggplot(data = MM, mapping= aes(x=term, y=p.value))
r <- r + geom_point(aes(color = metric, stroke = 1, , shape = term), position=position_jitter(h=0, w=0.27))
r <- r + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
r <- r + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
r <- r + coord_trans(y="log2")
r <- r + scale_y_continuous(breaks=pretty_breaks(n=20)) + scale_y_continuous(breaks = c(0, 0.05, 0.10, 1))+  theme(axis.text.x = element_text(angle=90))
r
#ggsave(filename = "alpha_significance_tablewithdots_correctedforbaseline_MILK.png", width = 8, height = 8, plot = p, device = "png")
View(alpha)
library("DT")
library("knitr")
library("dplyr")
library("tidyr")
library("broom")
library("vegan")
library("scales")
library("ggplot2")
library("ggpubr")
# library("madbito")
library("reshape2")
library("gghighlight")
library("data.table")
library("rmarkdown")
library("ggrepel")
library("ggplot2")
metadata <- fread("/home/mycelium/Results/Milkqua_milk_invivopublication/mapping_milkqua_milk.csv")
names(metadata)[1] <- "sample"
metadata$Cow_ID <- paste(metadata$cow, metadata$ref)
metadata$timepoint[metadata$timepoint == "0"] <- "T0"
metadata$timepoint[metadata$timepoint == "8"] <- "T1"
metadata$timepoint[metadata$timepoint == "21"] <- "T2"
metadata$timepoint[metadata$timepoint == "28"] <- "T3"
alpha <- read.table("/home/mycelium/Results/Milkqua_milk_invivopublication/results/alpha.csv", header = TRUE, sep = ",")
#alpha$sample <- row.names(alpha)
alpha$sample <-  gsub("sample.","", as.character(alpha$sample.id))
alpha$sample.id <- NULL
alpha$observed_species <- NULL
alpha$se.ACE <- NULL
alpha$se.chao1 <- NULL
mAlpha <- reshape2::melt(alpha, id.vars = "sample", variable.name = "metric", value.name = "value")
mAlpha$type <- metadata$sample_type[match(mAlpha$sample,metadata$sample)]
mAlpha$timepoint <- metadata$timepoint[match(mAlpha$sample,metadata$sample)]
mAlpha$treatment <- metadata$treatment[match(mAlpha$sample,metadata$sample)]
mAlpha <- filter(mAlpha, type == "milk") %>% select(-c(type))
mAlpha$timepoint <- factor(mAlpha$timepoint, levels = c("T0","T1","T2","T3"))
D <- mAlpha %>%
group_by(metric,treatment, timepoint) %>%
summarize(N=n(),avg=round(mean(value),3)) %>%
spread(key = metric, value = avg)
D$timepoint <- factor(D$timepoint, levels = c("T0","T1","T2","T3"))
d_alpha <- D %>%
gather(key = "metric", value = "value", -c(treatment,timepoint,N)) %>%
spread(key = "treatment", value = "value")
kable(D)
mAlpha <- mAlpha %>% group_by(metric) %>%
mutate(scaled_value = rescale(value, to = c(0,100)))
p <- ggplot(mAlpha, aes(x=timepoint,y=scaled_value))
p <- p + geom_boxplot(aes(fill=treatment))
p <- p + scale_fill_manual(values=c("#56B4E9", "#E69F00"))
p <- p + facet_wrap(~metric, scales = "free")
p <- p + xlab("sample_type")
p = p + theme(strip.text = element_text(size = 12),
axis.text.x = element_text(size = 8))
p
D <- mAlpha %>%
group_by(metric, timepoint) %>%
do(tidy(lm(value ~ treatment, data = .))) %>%
filter(term != "(Intercept)")
datatable(D, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
p <- ggplot(data = D, mapping= aes(x=timepoint, y=p.value))
p <- p + geom_point(aes(color = metric, stroke = 1), position=position_jitter(h=0, w=0.25))
p <- p + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
p <- p + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5)
p <- p + scale_y_continuous(breaks=pretty_breaks(n=20))
p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
p <- p + coord_trans(y="log2")
p
#ggsave(filename = "alpha_significance_tablewithdots_MILK.png", width = 8, height = 8, plot = p, device = "png")
## Correction for baseline
bl_medie <- mAlpha %>%
filter(timepoint=="T0") %>%
group_by(metric,treatment) %>%
summarize(media_bl=mean(value))
bl_counts <- mAlpha %>%
group_by(metric,treatment) %>%
filter(timepoint=="T0") %>%
arrange(metric) %>%
rename(value.bl = value)
M <- merge(mAlpha,bl_counts[,c(1,2,3)],by=c("metric","sample"),all.x = TRUE)
M1 <- M%>%
filter(!is.na(M$value.bl))
M2 <- M %>%
filter(is.na(value.bl)) %>%
mutate(value.bl=replace(value.bl,is.na(value.bl),right_join(bl_medie, ., by =c("metric","treatment"))$media_bl))
M <- rbind.data.frame(M1,M2)
M <- M %>%
mutate(corrected_counts=value-value.bl) %>%
filter(value!=0) %>%
arrange(sample)
M <- M %>%
group_by(metric) %>%
mutate(scaled_counts=scales::rescale(corrected_counts,c(0,100)))
D <- M %>%
group_by(metric,treatment,timepoint) %>%
summarize(avg=mean(corrected_counts)) %>%
spread(key = metric, value = avg)
kable(D)
mD <- melt(D, id.vars = c("timepoint","treatment"), variable.name = "metric")
p <- ggplot(mD, aes(x=timepoint,y=value, group=treatment)) + geom_point(aes(colour=treatment))
p <- p + geom_line(aes(colour=treatment))
p <- p + facet_wrap(~metric, scales = "free_y")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
TP <- M %>%
filter(timepoint != "T0") %>%
group_by(metric, timepoint) %>%
do(tidy(lm(corrected_counts ~ treatment, data = .))) %>%
filter(term != "(Intercept)")
datatable(TP, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
p <- ggplot(data = TP, mapping= aes(x=timepoint, y=p.value))
p <- p + geom_point(aes(color = metric, stroke = 1), position=position_jitter(h=0, w=0.27))
p <- p + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
p <- p + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
p <- p + coord_trans(y="log2")
p <- p + scale_y_continuous(breaks=pretty_breaks(n=20)) + scale_y_continuous(breaks = c(0, 0.05, 0.10, 1))+  theme(axis.text.x = element_text(angle=90))
p
#ggsave(filename = "alpha_significance_tablewithdots_correctedforbaseline_MILK.png", width = 8, height = 8, plot = p, device = "png")
TR <- M %>%
filter(timepoint != "T0") %>%
group_by(metric, treatment) %>%
do(tidy(lm(corrected_counts ~ timepoint, data = .))) %>%
filter(term != "(Intercept)")
datatable(TR, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
q <- ggplot(data = TR, mapping= aes(x=treatment, y=p.value))
q <- q + geom_point(aes(color = metric, stroke = 1, shape = term), position=position_jitter(h=0, w=0.27))
q <- q + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
q <- q + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
q <- q + coord_trans(y="log2")
q <- q + scale_y_continuous(breaks=pretty_breaks(n=20)) + scale_y_continuous(breaks = c(0, 0.05, 0.10, 1))+  theme(axis.text.x = element_text(angle=90))
q
#ggsave(filename = "alpha_significance_tablewithdots_correctedforbaseline_MILK.png", width = 8, height = 8, plot = p, device = "png")
MM <- M %>%
filter(timepoint != 0) %>%
group_by(metric) %>%
do(tidy(lm(corrected_counts ~ timepoint+treatment, data = .))) %>%
filter(term != "(Intercept)")
datatable(MM, options = list(pageLength=100)) %>%
formatStyle('p.value', backgroundColor = styleInterval(0.05, c('yellow', 'white')))
r <- ggplot(data = MM, mapping= aes(x=term, y=p.value))
r <- r + geom_point(aes(color = metric, stroke = 1, , shape = term), position=position_jitter(h=0, w=0.27))
r <- r + geom_hline(yintercept=0.05, linetype="dashed", color = "red", size=0.5)
r <- r + geom_hline(yintercept=0.10, linetype="dashed", color = "darkorange", size=0.5) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# p <- p + gghighlight(p.value < 0.10, label_key = metric, use_direct_label = FALSE)
r <- r + coord_trans(y="log2")
r <- r + scale_y_continuous(breaks=pretty_breaks(n=20)) + scale_y_continuous(breaks = c(0, 0.05, 0.10, 1))+  theme(axis.text.x = element_text(angle=90))
r
#ggsave(filename = "alpha_significance_tablewithdots_correctedforbaseline_MILK.png", width = 8, height = 8, plot = p, device = "png")
figure_finalA <- ggarrange(p, q, r, widths=c(1, 1,1), heights=c(1,1,1),  labels=c("A", "B", "C"), ncol=3, nrow=1 )
print(figure_finalA)
ggsave(filename = "~/Results/Milkqua_milk_invivopublication/results/alpha_MILK.png", plot = figure_finalA, device = "png", width = 15, height = 5)
write.csv(D, file="~/Results/Milkqua_milk_invivopublication/results/alpha_MILK.csv")
